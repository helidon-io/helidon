<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Security" optional="true">
        <inputs>
            <boolean id="security"
                     name="Secure Application"
                     description="Authentication and authorization"
                     default="false"
                     optional="true">
                <inputs>
                    <list id="atn" name="Select Authentication Providers" optional="true">
                        <option value="oidc" name="OIDC" description="OpenID Connect">
                            <output>
                                <model>
                                    <list key="providers-config-entries">
                                        <value file="files/application.oidc.yaml"/>
                                    </list>
                                    <list key="dependencies" if="${flavor} == 'se'">
                                        <map>
                                            <value key="groupId">io.helidon.security.providers</value>
                                            <value key="artifactId">helidon-security-providers-oidc</value>
                                        </map>
                                    </list>
                                    <list key="dependencies" if="${flavor} == 'mp'">
                                        <map>
                                            <value key="groupId">io.helidon.microprofile</value>
                                            <value key="artifactId">helidon-microprofile-oidc</value>
                                        </map>
                                    </list>
                                    <list key="modules" if="${flavor} == 'se'">
                                        <value>io.helidon.security.providers.oidc</value>
                                    </list>
                                    <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                        <value>io.helidon.common.context.Contexts</value>
                                        <value>io.helidon.security.Security</value>
                                        <value>io.helidon.security.integration.webserver.WebSecurity</value>
                                        <value>io.helidon.security.providers.oidc.OidcSupport</value>
                                    </list>
                                    <list key="Main-createRouting" if="${flavor} == 'se'">
                                        <value><![CDATA[        Security security = Security.create(config.get("security"));]]></value>
                                        <value><![CDATA[        Contexts.globalContext().register(security);]]></value>
                                    </list>
                                    <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                        <value><![CDATA[                .register(WebSecurity.create(security, config.get("security")))]]></value>
                                    </list>
                                    <list key="Main-security-routing-section" if="${flavor} == 'se'">
                                        <value><![CDATA[        Config securityProviders = config.get("security").get("providers");
        if (securityProviders.exists()) {
            securityProviders.asNodeList().get().stream()
                             .filter(it -> it.get("oidc").exists())
                             .findFirst()
                             .ifPresent(it -> builder.register(OidcSupport.create(config)));
        }]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="jwt" name="JWT" description="JSON Web Token">
                            <output>
                                <model>
                                    <list key="providers-config-entries">
                                        <value file="files/application.jwt.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.security.providers</value>
                                            <value key="artifactId">helidon-security-providers-jwt</value>
                                        </map>
                                    </list>
                                    <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                        <value>io.helidon.security.integration.webserver.WebSecurity</value>
                                    </list>
                                    <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                        <value><![CDATA[                .register(WebSecurity.create(config.get("security")))]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="google" name="Google Login" description="Google identity">
                            <output>
                                <model>
                                    <list key="providers-config-entries">
                                        <value file="files/application.google.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.security.providers</value>
                                            <value key="artifactId">helidon-security-providers-google-login</value>
                                        </map>
                                    </list>
                                    <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                        <value>io.helidon.security.integration.webserver.WebSecurity</value>
                                    </list>
                                    <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                        <value><![CDATA[                .register(WebSecurity.create(config.get("security")))]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="http-signature" name="HTTP Signature" description="Service to service authentication">
                            <output>
                                <files>
                                    <directory>files</directory>
                                    <includes>
                                        <include>src/main/resources/keystore.p12</include>
                                    </includes>
                                </files>
                                <model>
                                    <list key="providers-config-entries">
                                        <value file="files/application.http-signature.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.security.providers</value>
                                            <value key="artifactId">helidon-security-providers-http-sign</value>
                                        </map>
                                    </list>
                                    <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                        <value>io.helidon.security.integration.webserver.WebSecurity</value>
                                    </list>
                                    <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                        <value><![CDATA[                .register(WebSecurity.create(config.get("security")))]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </list>
                    <list id="atz" name="Select Authorization Providers" optional="true">
                        <option value="abac" name="ABAC" description="Attribute Based Access Control">
                            <output>
                                <model>
                                    <list key="providers-config-entries">
                                        <value file="files/application.abac.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.security.providers</value>
                                            <value key="artifactId">helidon-security-providers-abac</value>
                                        </map>
                                    </list>
                                    <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                        <value>io.helidon.security.integration.webserver.WebSecurity</value>
                                    </list>
                                    <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                        <value><![CDATA[                .register(WebSecurity.create(config.get("security")))]]></value>
                                    </list>
                                    <list key="paths-config-entries">
                                        <value order="90"><![CDATA[         roles-allowed: ["user"]]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </list>
                </inputs>
                <output>
                    <model>
                        <value key="security">true</value>
                        <list key="dependencies" if="${flavor} == 'mp'">
                            <map>
                                <value key="groupId">io.helidon.microprofile</value>
                                <value key="artifactId">helidon-microprofile-security</value>
                            </map>
                        </list>
                        <list key="dependencies" if="${flavor} == 'se'">
                            <map>
                                <value key="groupId">io.helidon.security</value>
                                <value key="artifactId">helidon-security</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.security.integration</value>
                                <value key="artifactId">helidon-security-integration-webserver</value>
                            </map>
                        </list>
                        <list key="modules">
                            <value if="${flavor} == 'se'">io.helidon.security</value>
                            <value if="${flavor} == 'se'">io.helidon.security.integration.webserver</value>
                        </list>
                        <list key="paths-config-entries">
                            <value><![CDATA[       - path: "/simple-greet"
         methods: ["get"]
         authenticate: true]]></value>
                        </list>
                    </model>
                </output>
            </boolean>
        </inputs>
    </step>
</archetype-script>
