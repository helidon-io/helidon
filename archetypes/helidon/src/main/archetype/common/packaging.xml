<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <exec src="native-image.xml"/>
    <step name="Packaging and Deployment" optional="true">
        <exec src="docker.xml"/>
        <inputs>
            <boolean id="k8s"
                     name="Kubernetes Support"
                     description="Add Kubernetes manifests to your project"
                     default="false"
                     optional="true">
                <output>
                    <templates engine="mustache" transformations="mustache">
                        <directory>files</directory>
                        <includes>
                            <include>app.yaml.mustache</include>
                        </includes>
                    </templates>
                    <model>
                        <list key="readme-sections">
                            <value order="50" template="mustache"><![CDATA[
## Run the application in Kubernetes

If you don’t have access to a Kubernetes cluster, you can [install one](https://helidon.io/docs/latest/#/about/kubernetes) on your desktop.

### Verify connectivity to cluster

```
kubectl cluster-info                        # Verify which cluster
kubectl get pods                            # Verify connectivity to cluster
```
{{#k8s-readme-sections}}
{{#first}}

{{/first}}
{{.}}
{{/k8s-readme-sections}}

### Deploy the application to Kubernetes

```
kubectl create -f app.yaml                              # Deploy application
kubectl get pods                                        # Wait for quickstart pod to be RUNNING
kubectl get service  {{artifactId}}                     # Get service info
kubectl port-forward service/{{artifactId}} 8081:8080   # Forward service port to 8081
```

You can now exercise the application as you did before but use the port number 8081.

After you’re done, cleanup.

```
kubectl delete -f app.yaml
```
]]>
                            </value>
                        </list>
                    </model>
                </output>
            </boolean>
            <boolean id="v8o"
                     name="Verrazzano Support"
                     description="Add Verrazzano manifests to your project"
                     default="false"
                     optional="true">
                <output>
                    <templates engine="mustache" transformations="mustache">
                        <directory>files</directory>
                        <includes>
                            <include>v8o.yaml.mustache</include>
                        </includes>
                    </templates>
                </output>
            </boolean>
            <boolean id="jpms"
                     name="Module support (JPMS)"
                     description="Add a module-info to your project"
                     default="false"
                     optional="true">
                <output>
                    <templates engine="mustache" transformations="mustache,packaged">
                        <directory>files</directory>
                        <includes>
                            <include>src/main/java/module-info.java.mustache</include>
                            <include if="${flavor} == 'mp'">src/**/Main.java.mustache</include>
                        </includes>
                    </templates>
                    <model if="${flavor} == 'mp'">
                        <value key="mainClass">${package}.Main</value>
                        <value key="Main-class-javadoc"><![CDATA[
/**
 * Main entry point of the application.
 * <p>
 * Note that this class is required when using modules as the module main class must be in a package that is either exported
 * or opened by the module, see {@link java.lang.module.ModuleDescriptor#read(java.io.InputStream, java.util.function.Supplier)}.
 * <p>
 * This class provides a proper module main class and calls the {@link io.helidon.microprofile.cdi.Main#main(String[]) built-in main class}.
 */]]>
                        </value>
                        <value key="Main-method-javadoc"><![CDATA[
    /**
     * Main method. Starts CDI (and the application).
     *
     * @param args ignored
     */]]>
                        </value>
                        <list key="Main-class-fields">
                            <value><![CDATA[
    /**
    * Cannot be instantiated.
    */
    private Main() {
    }
]]>
                            </value>
                        </list>
                        <list key="Main-method-content">
                            <value><![CDATA[io.helidon.microprofile.cdi.Main.main(args);]]></value>
                        </list>
                        <list key="module-requires">
                            <value>io.helidon.microprofile.cdi</value>
                        </list>
                    </model>
                </output>
            </boolean>
        </inputs>
    </step>
</archetype-script>
