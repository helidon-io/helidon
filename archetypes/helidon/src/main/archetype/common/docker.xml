<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <inputs>
        <boolean id="docker"
                 name="Docker support"
                 description="Add a Dockerfile to your project"
                 default="false"
                 optional="true">
            <inputs>
                <boolean id="native-image"
                         name="GraalVM Native Image Support"
                         description="Add a native-image capable Dockerfile to your project"
                         default="false"
                         optional="true"/>
                <boolean id="jlink-image" name="JLink Support"
                         description="Add a JLink capable Dockerfile to your project"
                         default="false"
                         optional="true"/>
            </inputs>
            <output>
                <files>
                    <directory>files</directory>
                    <includes>
                        <include>.dockerignore</include>
                    </includes>
                </files>
                <templates engine="mustache" transformations="mustache">
                    <directory>files</directory>
                    <includes>
                        <include>Dockerfile.mustache</include>
                        <include if="${native-image}">Dockerfile.native.mustache</include>
                        <include if="${jlink-image}">Dockerfile.jlink.mustache</include>
                    </includes>
                </templates>
                <model>
                    <list key="poms">
                        <value>pom.xml</value>
                    </list>
                    <list key="src-dirs" if="!${multi-module}">
                        <value>src</value>
                    </list>
                    <list key="native-sections" if="${db} &amp;&amp; ${flavor} == 'mp'">
                        <value file="/se/database/files/README.native.md" if="${docker.native-image}" template="mustache"/>
                    </list>
                    <list key="native-sections" if="${db} &amp;&amp; ${flavor} == 'se'">
                        <value file="/se/database/files/README.native.md" if="${docker.native-image} &amp;&amp; ${db.server} != 'mongodb'" template="mustache"/>
                    </list>
                    <list key="readme-sections">
                        <value order="50" template="mustache">
                            <![CDATA[
## Building the Docker Image

```
docker build -t {{artifactId}} .
```

## Running the Docker Image

{{#docker-run-readme-section}}
{{.}}
{{/docker-run-readme-section}}
{{^docker-run-readme-section}}
```
docker run --rm -p 8080:8080 {{artifactId}}:latest
```
{{/docker-run-readme-section}}

Exercise the application as described above.
                                ]]>
                        </value>
                        <value template="mustache" if="${native-image}">
                            <![CDATA[
## Building a Native Image

{{#native-sections}}
{{.}}
{{/native-sections}}
]]>
                        </value>
                        <value order="40" template="mustache" if="${jlink-image}">
                            <![CDATA[
## Building a Custom Runtime Image

Build the custom runtime image using the jlink image profile:

```
mvn package -Pjlink-image
```

This uses the helidon-maven-plugin to perform the custom image generation.
After the build completes it will report some statistics about the build including the reduction in image size.

The target/{{artifactId}}-jri directory is a self contained custom image of your application. It contains your application,
its runtime dependencies and the JDK modules it depends on. You can start your application using the provide start script:

```
./target/{{artifactId}}-jri/bin/start
```

Class Data Sharing (CDS) Archive
Also included in the custom image is a Class Data Sharing (CDS) archive that improves your application’s startup
performance and in-memory footprint. You can learn more about Class Data Sharing in the JDK documentation.

The CDS archive increases your image size to get these performance optimizations. It can be of significant size (tens of MB).
The size of the CDS archive is reported at the end of the build output.

If you’d rather have a smaller image size (with a slightly increased startup time) you can skip the creation of the CDS
archive by executing your build like this:

```
mvn package -Pjlink-image -Djlink.image.addClassDataSharingArchive=false
```

For more information on available configuration options see the helidon-maven-plugin documentation.
                                ]]>
                        </value>
                    </list>
                    <list key="docker-phase1-options" if="${~flavor} == 'mp'">
                        <value>-Declipselink.weave.skip</value>
                        <value>-DskipOpenApiGenerate</value>
                    </list>
                </model>
            </output>
        </boolean>
    </inputs>
</archetype-script>
