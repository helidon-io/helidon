<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Extra" optional="true">
        <inputs>
            <list id="extra" name="Select Additional Components" optional="true">
                <option value="webclient" name="WebClient" description="Reactive HTTP client" if="${flavor} == 'se'">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/WebClientMain.java.mustache</include>
                                <include>src/*/java/**/WebClientMainTest.java.mustache</include>
                            </includes>
                        </templates>
                        <model>
                            <list key="modules">
                                <value>io.helidon.webclient</value>
                            </list>
                        </model>
                    </output>
                </option>
                <option value="fault-tolerance" name="Fault Tolerance" description="System for building resilient applications">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/FtService.java.mustache</include>
                                <include>src/*/java/**/FtServiceTest.java.mustache</include>
                                <include>src/*/java/**/FtResource.java.mustache</include>
                                <include>src/*/java/**/FtResourceTest.java.mustache</include>
                            </includes>
                        </templates>
                        <model>
                            <list key="dependencies" if="${flavor} == 'se'">
                                <map>
                                    <value key="groupId">io.helidon.fault-tolerance</value>
                                    <value key="artifactId">helidon-fault-tolerance</value>
                                </map>
                            </list>
                            <list key="dependencies" if="${flavor} == 'mp'">
                                <map>
                                    <value key="groupId">io.helidon.microprofile</value>
                                    <value key="artifactId">helidon-microprofile-fault-tolerance</value>
                                </map>
                                <map>
                                    <value key="groupId">io.helidon.webclient</value>
                                    <value key="artifactId">helidon-webclient</value>
                                </map>
                            </list>
                            <list key="modules">
                                <value if="${flavor} == 'mp'">io.helidon.microprofile.faulttolerance</value>
                                <value if="${flavor} == 'mp'">io.helidon.common.reactive</value>
                                <value if="${flavor} == 'se'">io.helidon.faulttolerance</value>
                            </list>
                            <list key="Main-helidon-imports">
                                <value>io.helidon.common.http.Http</value>
                                <value>io.helidon.faulttolerance.BulkheadException</value>
                                <value>io.helidon.faulttolerance.CircuitBreakerOpenException</value>
                            </list>
                            <list key="Main-other-imports">
                                <value>java.util.concurrent.TimeoutException</value>
                            </list>
                            <list key="Main-routingBuilder">
                                <value><![CDATA[                .register("/ft", new FtService())
                .error(BulkheadException.class,
                        (req, res, ex) -> res.status(Http.Status.SERVICE_UNAVAILABLE_503).send("bulkhead"))
                .error(CircuitBreakerOpenException.class,
                        (req, res, ex) -> res.status(Http.Status.SERVICE_UNAVAILABLE_503).send("circuit breaker"))
                .error(TimeoutException.class,
                        (req, res, ex) -> res.status(Http.Status.REQUEST_TIMEOUT_408).send("timeout"))
                .error(Throwable.class,
                        (req, res, ex) -> res.status(Http.Status.INTERNAL_SERVER_ERROR_500)
                                .send(ex.getClass().getName() + ": " + ex.getMessage()))]]></value>
                            </list>
                        </model>
                    </output>
                </option>
                <option value="cors" name="CORS" description="Cross-Origin Resource Sharing utilities">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/TestCORS.java.mustache</include>
                                <include if="${flavor} == 'se'">src/*/java/**/CorsService.java.mustache</include>
                            </includes>
                        </templates>
                        <model>
                            <list key="dependencies">
                                <map if="${flavor} == 'mp'">
                                    <value key="groupId">io.helidon.microprofile</value>
                                    <value key="artifactId">helidon-microprofile-cors</value>
                                </map>
                                <map if="${flavor} == 'mp'">
                                    <value key="groupId">io.helidon.webclient</value>
                                    <value key="artifactId">helidon-webclient</value>
                                </map>
                                <map if="${flavor} == 'mp'">
                                    <value key="groupId">io.helidon.webclient</value>
                                    <value key="artifactId">helidon-webclient</value>
                                </map>
                                <map if="${flavor} == 'mp'">
                                    <value key="groupId">io.helidon.microprofile.metrics</value>
                                    <value key="artifactId">helidon-microprofile-metrics</value>
                                </map>
                                <map if="${flavor} == 'se'">
                                    <value key="groupId">io.helidon.webserver</value>
                                    <value key="artifactId">helidon-webserver-cors</value>
                                </map>
                            </list>
                            <list key="FileServiceTest-annotations" if="${media} contains 'multipart'">
                                <value>@AddExtension(CorsCdiExtension.class)</value>
                            </list>
                            <list key="FileServiceTest-helidon-imports" if="${media} contains 'multipart'">
                                <value>io.helidon.microprofile.cors.CorsCdiExtension</value>
                            </list>
                            <list key="SimpleGreetService-imports" if="${flavor} == 'mp'">
                                <value>io.helidon.microprofile.cors.CrossOrigin</value>
                                <value>jakarta.ws.rs.OPTIONS</value>
                                <value>jakarta.ws.rs.PUT</value>
                                <value>jakarta.ws.rs.core.Response</value>
                                <value>jakarta.ws.rs.HttpMethod</value>
                            </list>
                            <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                <value>io.helidon.webserver.cors.CorsSupport</value>
                                <value>io.helidon.webserver.cors.CrossOriginConfig</value>
                            </list>
                            <list key="Main-createRouting" if="${flavor} == 'se'">
                                <value><![CDATA[
        CorsSupport corsSupport = CorsSupport.builder()
                .addCrossOrigin(CrossOriginConfig.builder()
                        .allowOrigins("http://foo.com", "http://there.com")
                        .allowMethods("PUT", "DELETE")
                        .build())
                .addCrossOrigin(CrossOriginConfig.create())
                .build();]]></value>
                            </list>
                            <list key="modules">
                                <value if="${flavor} == 'mp'">io.helidon.microprofile.cors</value>
                                <value if="${flavor} == 'se'">io.helidon.webserver.cors</value>
                            </list>
                            <list key="Main-routingBuilder" if="${flavor} == 'se'">
                                <value><![CDATA[                .register("/cors", corsSupport, new CorsService())]]></value>
                            </list>
                            <list key="SimpleGreetService-methods" if="${flavor} == 'mp'">
                                <value><![CDATA[
    @PUT
    public Response getCustomMessage(String greeting) {
        String msg = String.format("%s %s!", greeting, "World");
        return Response.ok(msg).build();
    }

    /**
     * CORS set-up for getCustomMessage.
     */
    @OPTIONS
    @CrossOrigin(value = {"http://foo.com", "http://there.com"},
            allowMethods = {HttpMethod.PUT})
    public void optionsForGetCustomMessage() {
    }]]></value>
                            </list>
                            <list key="readme-sections">
                                <value><![CDATA[
## Using CORS

### Sending "simple" CORS requests

The following requests illustrate the CORS protocol with the example app.

By setting `Origin` and `Host` headers that do not indicate the same system we trigger CORS processing in the
 server:

```bash
# Follow the CORS protocol for GET
curl -i -X GET -H "Origin: http://foo.com" -H "Host: here.com" http://localhost:8080/cors

HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json
Date: Thu, 30 Apr 2020 17:25:51 -0500
Vary: Origin
connection: keep-alive
content-length: 27

{"greeting":"Hello World!"}
```
Note the new headers `Access-Control-Allow-Origin` and `Vary` in the response.

These are what CORS calls "simple" requests; the CORS protocol for these adds headers to the request and response which
the client and server exchange anyway.

### "Non-simple" CORS requests

The CORS protocol requires the client to send a _pre-flight_ request before sending a request
that changes state on the server, such as `PUT` or `DELETE`, and to check the returned status
and headers to make sure the server is willing to accept the actual request. CORS refers to such `PUT` and `DELETE`
requests as "non-simple" ones.

This command sends a pre-flight `OPTIONS` request to see if the server will accept a subsequent `PUT` request from the
specified origin to change the greeting:
```bash
curl -i -X OPTIONS \
    -H "Access-Control-Request-Method: PUT" \
    -H "Origin: http://foo.com" \
    -H "Host: here.com" \
    http://localhost:8080/cors/greeting

HTTP/1.1 200 OK
Access-Control-Allow-Methods: PUT
Access-Control-Allow-Origin: http://foo.com
Date: Thu, 30 Apr 2020 17:30:59 -0500
transfer-encoding: chunked
connection: keep-alive
```
The successful status and the returned `Access-Control-Allow-xxx` headers indicate that the
 server accepted the pre-flight request. That means it is OK for us to send `PUT` request to perform the actual change
 of greeting. (See below for how the server rejects a pre-flight request.)
```bash
curl -i -X PUT \
    -H "Origin: http://foo.com" \
    -H "Host: here.com" \
    -H "Access-Control-Allow-Methods: PUT" \
    -H "Access-Control-Allow-Origin: http://foo.com" \
    http://localhost:8080/greet/Hola

HTTP/1.1 200 OK
Access-Control-Allow-Origin: http://foo.com
Date: Thu, 30 Apr 2020 17:32:55 -0500
Vary: Origin
connection: keep-alive

Hola World!
```

Note that the tests in the example `MainTest` class follow these same steps.
]]></value>
                            </list>
                        </model>
                    </output>
                </option>
            </list>
        </inputs>
        <output>
            <model>
                <value key="webclient" if="${extra} contains 'webclient'">true</value>
                <value key="fault-tolerance" if="${extra} contains 'fault-tolerance'">true</value>
                <value key="cors" if="${extra} contains 'cors'">true</value>
            </model>
        </output>
    </step>
</archetype-script>
