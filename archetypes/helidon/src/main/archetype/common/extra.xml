<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Extra" optional="true">
        <inputs>
            <list id="extra" name="Select Additional Components" optional="true">
                <option value="webclient" name="WebClient" description="Reactive HTTP client">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/WebClientMain.java.mustache</include>
                                <include>src/*/java/**/WebClientMainTest.java.mustache</include>
                            </includes>
                        </templates>
                    </output>
                </option>
                <option value="fault-tolerance" name="Fault Tolerance" description="System for building resilient applications">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/FtService.java.mustache</include>
                                <include>src/*/java/**/FtServiceTest.java.mustache</include>
                                <include>src/*/java/**/FtResource.java.mustache</include>
                                <include>src/*/java/**/FtResourceTest.java.mustache</include>
                            </includes>
                        </templates>
                        <model>
                            <list key="dependencies" if="${ROOT.flavor} == 'se'">
                                <map>
                                    <value key="groupId">io.helidon.fault-tolerance</value>
                                    <value key="artifactId">helidon-fault-tolerance</value>
                                </map>
                            </list>
                            <list key="dependencies" if="${ROOT.flavor} == 'mp'">
                                <map>
                                    <value key="groupId">io.helidon.microprofile</value>
                                    <value key="artifactId">helidon-microprofile-fault-tolerance</value>
                                </map>
                            </list>
                            <list key="Main-helidon-imports">
                                <value>io.helidon.common.http.Http</value>
                                <value>io.helidon.faulttolerance.BulkheadException</value>
                                <value>io.helidon.faulttolerance.CircuitBreakerOpenException</value>
                            </list>
                            <list key="Main-other-imports">
                                <value>java.util.concurrent.TimeoutException</value>
                            </list>
                            <list key="Main-routingBuilder">
                                <value><![CDATA[                .register("/ft", new FtService())
                .error(BulkheadException.class,
                        (req, res, ex) -> res.status(Http.Status.SERVICE_UNAVAILABLE_503).send("bulkhead"))
                .error(CircuitBreakerOpenException.class,
                        (req, res, ex) -> res.status(Http.Status.SERVICE_UNAVAILABLE_503).send("circuit breaker"))
                .error(TimeoutException.class,
                        (req, res, ex) -> res.status(Http.Status.REQUEST_TIMEOUT_408).send("timeout"))
                .error(Throwable.class,
                        (req, res, ex) -> res.status(Http.Status.INTERNAL_SERVER_ERROR_500)
                                .send(ex.getClass().getName() + ": " + ex.getMessage()))]]></value>
                            </list>
                        </model>
                    </output>
                </option>
                <option value="cors" name="CORS" description="Cross-Origin Resource Sharing utilities">
                    <output>
                        <templates engine="mustache" transformations="mustache,packaged">
                            <directory>files</directory>
                            <includes>
                                <include>src/*/java/**/TestCORS.java.mustache</include>
                                <include if="${ROOT.flavor} == 'se'">src/*/java/**/CorsService.java.mustache</include>
                            </includes>
                        </templates>
                        <model>
                            <list key="dependencies" if="${ROOT.flavor} == 'mp'">
                                <map>
                                    <value key="groupId">io.helidon.microprofile</value>
                                    <value key="artifactId">helidon-microprofile-cors</value>
                                </map>
                            </list>
                            <list key="SimpleGreetService-imports" if="${ROOT.flavor} == 'mp'">
                                <value>io.helidon.microprofile.cors.CrossOrigin</value>
                                <value>jakarta.ws.rs.OPTIONS</value>
                                <value>jakarta.ws.rs.PUT</value>
                                <value>jakarta.ws.rs.core.Response</value>
                                <value>jakarta.ws.rs.HttpMethod</value>
                            </list>
                            <list key="Main-helidon-imports" if="${ROOT.flavor} == 'se'">
                                <value>io.helidon.webserver.cors.CorsSupport</value>
                                <value>io.helidon.webserver.cors.CrossOriginConfig</value>
                            </list>
                            <list key="Main-createRouting" if="${ROOT.flavor} == 'se'">
                                <value><![CDATA[
        CorsSupport corsSupport = CorsSupport.builder()
                .addCrossOrigin(CrossOriginConfig.builder()
                        .allowOrigins("http://foo.com", "http://there.com")
                        .allowMethods("PUT", "DELETE")
                        .build())
                .addCrossOrigin(CrossOriginConfig.create())
                .build();]]></value>
                            </list>
                            <list key="Main-routingBuilder" if="${ROOT.flavor} == 'se'">
                                <value><![CDATA[                .register("/cors", corsSupport, new CorsService())]]></value>
                            </list>
                            <list key="SimpleGreetService-methods" if="${ROOT.flavor} == 'mp'">
                                <value><![CDATA[
    @PUT
    public Response getCustomMessage(String greeting) {
        String msg = String.format("%s %s!", greeting, "World");
        return Response.ok(msg).build();
    }

    /**
     * CORS set-up for getCustomMessage.
     */
    @OPTIONS
    @CrossOrigin(value = {"http://foo.com", "http://there.com"},
            allowMethods = {HttpMethod.PUT})
    public void optionsForGetCustomMessage() {
    }]]></value>
                            </list>
                        </model>
                    </output>
                </option>
            </list>
        </inputs>
        <output>
            <model>
                <value key="webclient" if="${extra} contains 'webclient'">true</value>
                <value key="fault-tolerance" if="${extra} contains 'fault-tolerance'">true</value>
                <value key="cors" if="${extra} contains 'cors'">true</value>
            </model>
        </output>
    </step>
</archetype-script>
