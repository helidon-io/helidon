<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Media Support" optional="true">
        <variables>
            <text path="media.default-json-lib">jsonb</text>
        </variables>
        <inputs>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/699 -->
            <list id="media" name="Select Media Support" default="json" optional="true">
                <option value="json" name="JSON" description="Handle 'application/json' payloads">
                    <inputs>
                        <enum id="json-lib" name="Select a JSON library" default="${default-json-lib}" optional="true">
                            <option value="jsonp" name="JSON-P" description="Jakarta JSON Processing" if="${flavor} == 'nima'">
                                <output>
                                    <model>
                                        <list key="dependencies">
                                            <map>
                                                <value key="groupId">jakarta.json</value>
                                                <value key="artifactId">jakarta.json-api</value>
                                            </map>
                                            <map>
                                                <value key="groupId">io.helidon.nima.http.media</value>
                                                <value key="artifactId">helidon-nima-http-media-jsonp</value>
                                            </map>
                                        </list>
                                        <list key="Main-routing-builder">
                                            <value>.register("/greet", new GreetService())</value>
                                        </list>
                                        <list key="MainTest-other-imports">
                                            <value>jakarta.json.JsonObject</value>
                                        </list>
                                        <list key="Abstract-tests">
                                            <value><![CDATA[
    @Test
    void testRootRoute() {
        try (Http1ClientResponse response = client.get("/greet")
                .request()) {

            assertThat(response.status(), is(Http.Status.OK_200));
            JsonObject json = response.as(JsonObject.class);
            assertThat(json.getString("message"), is("Hello World!"));
        }
    }
]]></value>
                                        </list>
                                        <list key="modules">
                                            <value>jakarta.json</value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                            <option value="jackson" name="Jackson" description="Popular JSON library">
                                <output>
                                    <model>
                                        <list key="dependencies">
                                            <map order="500">
                                                <value key="groupId">com.fasterxml.jackson.core</value>
                                                <value key="artifactId">jackson-databind</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'mp'">
                                                <value key="groupId">org.glassfish.jersey.media</value>
                                                <value key="artifactId">jersey-media-json-jackson</value>
                                                <value key="scope">runtime</value>
                                            </map>
                                        </list>
                                        <list key="modules">
                                            <value>com.fasterxml.jackson.annotation</value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                            <option value="jsonb" name="JSON-B" description="Jakarta JSON Binding">
                                <output>
                                    <model>
                                        <list key="dependencies">
                                            <map order="500" if="${flavor} != 'nima'">
                                                <value key="groupId">jakarta.json.bind</value>
                                                <value key="artifactId">jakarta.json.bind-api</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'mp'">
                                                <value key="groupId">org.glassfish.jersey.media</value>
                                                <value key="artifactId">jersey-media-json-binding</value>
                                                <value key="scope">runtime</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'nima'">
                                                <value key="groupId">io.helidon.nima.http.media</value>
                                                <value key="artifactId">helidon-nima-http-media-jsonb</value>
                                            </map>
                                        </list>
                                        <list key="Main-routing-builder" if="${flavor} == 'nima'">
                                            <value><![CDATA[.register("/greet", new GreetService())]]></value>
                                        </list>
                                        <list key="Abstract-tests" if="${flavor} == 'nima'">
                                            <value><![CDATA[
    @Test
    void testGreet() {
        try (Http1ClientResponse response = client.get("/greet").request()) {
            assertThat(response.status(), is(Http.Status.OK_200));
            assertThat(response.as(Message.class).getMessage(), is("Hello World!"));
        }
    }

    @Test
    void testGreetJoe() {
        try (Http1ClientResponse response = client.get("/greet/Joe").request()) {
            assertThat(response.status(), is(Http.Status.OK_200));
            assertThat(response.as(Message.class).getMessage(), is("Hello Joe!"));
        }
    }
]]></value>
                                        </list>
                                        <list key="modules">
                                            <value>jakarta.json</value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                        </enum>
                    </inputs>
                </option>
                <option value="multipart" name="MultiPart" description="Handle 'multipart/form-data' payloads">
                    <output>
                        <model>
                            <list key="dependencies">
                                <map order="500" if="${flavor} == 'mp'">
                                    <value key="groupId">org.glassfish.jersey.media</value>
                                    <value key="artifactId">jersey-media-multipart</value>
                                </map>
                                <map order="500" if="${flavor} == 'nima'">
                                    <value key="groupId">io.helidon.nima.http.media</value>
                                    <value key="artifactId">helidon-nima-http-media-multipart</value>
                                </map>
                                <map order="500" if="${flavor} == 'nima'">
                                    <value key="groupId">io.helidon.nima.http.media</value>
                                    <value key="artifactId">helidon-nima-http-media-jsonp</value>
                                </map>
                                <map order="500" if="${flavor} == 'nima'">
                                    <value key="groupId">io.helidon.nima.webserver</value>
                                    <value key="artifactId">helidon-nima-webserver-static-content</value>
                                </map>
                                <map order="500" if="${flavor} == 'nima'">
                                    <value key="groupId">jakarta.json</value>
                                    <value key="artifactId">jakarta.json-api</value>
                                </map>
                            </list>
                            <list key="modules" if="${flavor} == 'nima'">
                                <value>jakarta.json</value>
                                <value>io.helidon.nima.http.media.multipart</value>
                                <value>io.helidon.nima.webserver.staticcontent</value>
                            </list>
                            <list key="modules" if="${flavor} == 'mp'">
                                <value>jakarta.json</value>
                                <value>jersey.media.multipart</value>
                            </list>
                            <list key="Main-helidon-imports" if="${flavor} == 'nima'">
                                <value>io.helidon.common.http.Http</value>
                                <value>io.helidon.common.http.Http.Header</value>
                                <value>io.helidon.nima.webserver.staticcontent.StaticContentService</value>
                            </list>
                            <list key="Main-routing-builder" if="${flavor} == 'nima'">
                                <value order="1"><![CDATA[.any("/", (req, res) -> {
                    res.status(Http.Status.MOVED_PERMANENTLY_301);
                    res.header(Http.Headers.createCached(Http.HeaderNames.LOCATION, "/ui"));
                    res.send();
                })
                .register("/ui", StaticContentService.builder("WEB")
                        .welcomeFileName("index.html")
                        .build())
                .register("/api", new FileService())]]></value>
                            </list>
                            <list key="Abstract-tests">
                            <value><![CDATA[
    @Test
    void testFileService() {
        try (Http1ClientResponse response = client.get("/api").request()) {
            assertThat(response.status(), is(Http.Status.OK_200));
        }
    }
]]></value>
                            </list>
                        </model>
                    </output>
                </option>
            </list>
        </inputs>
        <variables>
            <text path="media.json-lib" if="!(${media} contains 'json')"/>
        </variables>
        <output>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/609 -->
            <model>
                <value key="media-json" if="${media} contains 'json'">true</value>
                <value key="media-json" if="!(${media} contains 'json')">false</value>
                <value key="media-json-jackson" if="${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson'">true</value>
                <value key="media-json-jackson" if="!(${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson')">false</value>
                <value key="json-lib" if="${media} contains 'json'">${media.json-lib}</value>
                <value key="multipart" if="${media} contains 'multipart'">true</value>
            </model>
        </output>
    </step>
</archetype-script>
