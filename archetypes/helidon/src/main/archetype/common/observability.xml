<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Observability" optional="true">
        <inputs>
            <boolean id="metrics"
                     name="Metrics"
                     description="Collect application metrics"
                     default="false"
                     optional="true">
                <inputs>
                    <boolean id="builtin"
                             name="Built-in Metrics"
                             description="Expose common metrics"
                             default="true"
                             optional="true"
                             if="${flavor} == 'se'"/>
                </inputs>
            </boolean>
            <boolean id="health"
                     name="Health Checks"
                     description="Monitor your applicationâ€™s health"
                     default="false"
                     optional="true">
                <inputs>
                    <boolean id="builtin"
                             name="Built-in Health Checks"
                             description="Report common health check statuses"
                             default="true"
                             optional="true">
                        <output>
                            <model>
                                <list key="dependencies">
                                    <map order="800" if="${flavor} == 'mp'">
                                        <value key="groupId">io.helidon.microprofile.health</value>
                                        <value key="artifactId">helidon-microprofile-health</value>
                                    </map>
                                    <map order="800" if="${flavor} == 'se'">
                                        <value key="groupId">io.helidon.health</value>
                                        <value key="artifactId">helidon-health</value>
                                    </map>
                                    <map order="800" if="${flavor} == 'se'">
                                        <value key="groupId">io.helidon.health</value>
                                        <value key="artifactId">helidon-health-checks</value>
                                    </map>
                                </list>
                                <list key="module-requires">
                                    <value>io.helidon.health</value>
                                    <value if="${flavor} == 'se'">io.helidon.health.checks</value>
                                </list>
                                <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                    <value>io.helidon.health.HealthSupport</value>
                                    <value>io.helidon.health.checks.HealthChecks</value>
                                </list>
                                <list key="Main-createRouting">
                                    <value template="mustache" order="0"><![CDATA[
        HealthSupport health = HealthSupport.builder()
                .addLiveness(HealthChecks.healthChecks()) // Adds a convenient set of checks
{{#Main-healthBuilder}}
{{.}}
{{/Main-healthBuilder}}
                .build();]]>
                                    </value>
                                </list>
                                <list key="Main-routingBuilder">
                                    <value><![CDATA[                .register(health) // Health at "/health"]]></value>
                                </list>
                                <list key="MainTest-methods">
                                    <value if="${flavor} == 'mp'"><![CDATA[
    @Test
    void testHealth() {
        Response response = target
                .path("health")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]></value>
                                    <value if="${flavor} == 'se'"><![CDATA[
    @Test
    void testHealth() {
        WebClientResponse response = webClient.get()
                .path("health")
                .request()
                .await(Duration.ofSeconds(5));
        assertThat(response.status().code(), is(200));
    }]]></value>
                                </list>
                                <list key="readme-sections">
                                    <value><![CDATA[
## Try health

```
curl -s -X GET http://localhost:8080/health
{"outcome":"UP",...

```

]]></value>
                                </list>
                            </model>
                        </output>
                    </boolean>
                </inputs>
                <output if="${db} &amp;&amp; ${flavor} == 'se'">
                    <model>
                        <list key="dependencies">
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-health</value>
                            </map>
                        </list>
                        <list key="Main-helidon-imports">
                            <value>io.helidon.dbclient.health.DbClientHealthCheck</value>
                        </list>
                        <list key="Main-healthBuilder">
                            <value><![CDATA[                .addLiveness(DbClientHealthCheck.create(dbClient, dbConfig.get("health-check")))]]></value>
                        </list>
                    </model>
                </output>
            </boolean>
            <boolean id="tracing"
                     name="Tracing"
                     description="Distributed tracing system"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="provider"
                          name="Select a Tracing Provider"
                          default="jaeger"
                          optional="true">
                        <option value="jaeger"
                                name="Jaeger"
                                description="Send traces to a Jaeger backend" >
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map order="800">
                                            <value key="groupId">io.helidon.tracing</value>
                                            <value key="artifactId">helidon-tracing-jaeger</value>
                                        </map>
                                    </list>
                                    <list key="readme-sections">
                                        <value file="/common/files/README.jaeger.md"/>
                                    </list>
                                    <list key="test-config-properties">
                                        <value>tracing.global=false</value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="zipkin"
                                name="Zipkin"
                                description="Send traces to a Zipkin backend">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map order="800">
                                            <value key="groupId">io.helidon.tracing</value>
                                            <value key="artifactId">helidon-tracing-zipkin</value>
                                        </map>
                                    </list>
                                    <list key="readme-sections">
                                        <value file="/common/files/README.zipkin.md"/>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                </inputs>
                <output if="${db} &amp;&amp; ${flavor} == 'se'">
                    <model>
                        <list key="dependencies">
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-tracing</value>
                            </map>
                        </list>
                    </model>
                </output>
            </boolean>
        </inputs>
        <output>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/609 -->
            <model>
                <value key="metrics" if="${metrics}">true</value>
                <value key="metrics.builtin" if="${metrics} &amp;&amp; ${flavor} == 'se'">${metrics.builtin}</value>
                <value key="health" if="${health}">true</value>
                <value key="health.builtin" if="${health}">${health.builtin}</value>
                <value key="tracing" if="${tracing}">true</value>
                <value key="tracing.provider" if="${tracing}">${tracing.provider}</value>
            </model>
        </output>
    </step>
</archetype-script>
