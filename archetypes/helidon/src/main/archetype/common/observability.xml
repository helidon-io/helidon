<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Observability" optional="true">
        <inputs>
            <boolean id="metrics"
                     name="Metrics"
                     description="Collect application metrics"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="provider"
                          name="Select a Metrics Provider"
                          default="microprofile"
                          optional="true">
                        <option value="microprofile"
                                name="MicroProfile"
                                description="Expose metrics using the MicroProfile API">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map if="${ROOT.flavor} == 'mp'">
                                            <value key="groupId">org.eclipse.microprofile.metrics</value>
                                            <value key="artifactId">microprofile-metrics-api</value>
                                        </map>
                                        <map if="${ROOT.flavor} == 'mp'">
                                            <value key="groupId">io.helidon.microprofile.metrics</value>
                                            <value key="artifactId">helidon-microprofile-metrics</value>
                                        </map>
                                        <map if="${ROOT.flavor} == 'se'">
                                            <value key="groupId">io.helidon.metrics</value>
                                            <value key="artifactId">helidon-metrics</value>
                                        </map>
                                    </list>
                                    <list key="SimpleGreetService-imports">
                                        <value if="${ROOT.flavor} == 'mp'">org.eclipse.microprofile.metrics.MetricUnits</value>
                                        <value if="${ROOT.flavor} == 'mp'">org.eclipse.microprofile.metrics.annotation.Counted</value>
                                        <value if="${ROOT.flavor} == 'mp'">org.eclipse.microprofile.metrics.annotation.Timed</value>
                                        <value if="${ROOT.flavor} == 'mp'">jakarta.ws.rs.PathParam</value>

                                        <value if="${ROOT.flavor} == 'se'">org.eclipse.microprofile.metrics.MetricRegistry</value>
                                        <value if="${ROOT.flavor} == 'se'">org.eclipse.microprofile.metrics.Counter</value>
                                        <value if="${ROOT.flavor} == 'se'">io.helidon.metrics.api.RegistryFactory</value>
                                    </list>
                                    <list key="SimpleGreetResource-static-fields">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    private static final String PERSONALIZED_GETS_COUNTER_NAME = "personalizedGets";
    private static final String PERSONALIZED_GETS_COUNTER_DESCRIPTION = "Counts personalized GET operations";
    private static final String GETS_TIMER_NAME = "allGets";
    private static final String GETS_TIMER_DESCRIPTION = "Tracks all GET operations";]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    private final MetricRegistry registry = RegistryFactory.getInstance()
            .getRegistry(MetricRegistry.Type.APPLICATION);
    private final Counter accessCtr = registry.counter("accessctr");]]></value>
                                    </list>
                                    <list key="SimpleGreetService-methods">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Path("/{name}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Counted(name = PERSONALIZED_GETS_COUNTER_NAME,
             absolute = true,
             description = PERSONALIZED_GETS_COUNTER_DESCRIPTION)
    @Timed(name = GETS_TIMER_NAME,
           description = GETS_TIMER_DESCRIPTION,
           unit = MetricUnits.SECONDS,
           absolute = true)
    public String getMessage(@PathParam("name") String name) {
        return String.format("Hello %s", name);
    }]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    private void countAccess(ServerRequest request, ServerResponse response) {
        accessCtr.inc();
        request.next();
    }]]></value>
                                    </list>
                                    <list key="SimpleGreetResource-update" if="${ROOT.flavor} == 'se'">
                                        <value><![CDATA[        rules.get("/greet-count", this::countAccess, this::getDefaultMessageHandler);]]></value>
                                    </list>
                                    <list key="MainTest-java-imports">
                                        <value if="${ROOT.flavor} == 'mp'">org.eclipse.microprofile.metrics.Counter</value>
                                        <value if="${ROOT.flavor} == 'mp'">org.eclipse.microprofile.metrics.MetricRegistry</value>
                                    </list>
                                    <list key="MainTest-static-imports">
                                        <value if="${ROOT.flavor} == 'mp'">static org.junit.jupiter.api.Assertions.assertEquals</value>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Test
    public void testMicroprofileMetrics() {
        String message = target.path("simple-greet/Joe")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Joe"));
        Counter counter = registry.counter("personalizedGets");
        double before = counter.getCount();

        message = target.path("simple-greet/Eric")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Eric"));
        double after = counter.getCount();
        assertEquals(1d, after - before, "Difference in personalized greeting counter between successive calls");
    }]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    @Test
    public void testMicroprofileMetrics() {
        String get = webClient.get()
                .path("/simple-greet/greet-count")
                .request(String.class)
                .await();

        assertThat(get, containsString("Hello World!"));

        String openMetricsOutput = webClient.get()
                .path("/metrics")
                .request(String.class)
                .await();

        assertThat("Metrics output", openMetricsOutput, containsString("application_accessctr_total"));
    }]]></value>
                                    </list>
                                    <list key="MainTest-static-fields">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Inject
    private MetricRegistry registry;]]></value>
                                    </list>
                                    <list key="MainTest-static-imports">
                                        <value if="${ROOT.flavor} == 'se'">static org.hamcrest.Matchers.containsString</value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="micrometer"
                                name="Micrometer"
                                description="Expose metrics using the Micrometer API">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map if="${ROOT.flavor} == 'mp'">
                                            <value key="groupId">io.helidon.integrations.micrometer</value>
                                            <value key="artifactId">helidon-integrations-micrometer-cdi</value>
                                        </map>
                                        <map if="${ROOT.flavor} == 'se'">
                                            <value key="groupId">io.helidon.integrations.micrometer</value>
                                            <value key="artifactId">helidon-integrations-micrometer</value>
                                        </map>
                                    </list>
                                    <list key="SimpleGreetService-imports">
                                        <value if="${ROOT.flavor} == 'mp'">io.micrometer.core.annotation.Counted</value>
                                        <value if="${ROOT.flavor} == 'mp'">io.micrometer.core.annotation.Timed</value>
                                        <value if="${ROOT.flavor} == 'mp'">jakarta.ws.rs.PathParam</value>

                                        <value if="${ROOT.flavor} == 'se'">io.micrometer.core.instrument.Counter</value>
                                        <value if="${ROOT.flavor} == 'se'">io.micrometer.core.instrument.MeterRegistry</value>
                                    </list>
                                    <list key="SimpleGreetResource-static-fields">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    private static final String PERSONALIZED_GETS_COUNTER_NAME = "personalizedGets";
    private static final String PERSONALIZED_GETS_COUNTER_DESCRIPTION = "Counts personalized GET operations";
    private static final String GETS_TIMER_NAME = "allGets";
    private static final String GETS_TIMER_DESCRIPTION = "Tracks all GET operations";]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    private Counter requestCounter;]]></value>
                                    </list>
                                    <list key="SimpleGreetResource-constructor">
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    SimpleGreetService(Config config, MeterRegistry registry) {
        this(config);
        this.requestCounter = registry.counter("allRequests");
    }]]></value>
                                    </list>
                                    <list key="SimpleGreetService-methods">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Path("/{name}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Counted(value = PERSONALIZED_GETS_COUNTER_NAME, description = PERSONALIZED_GETS_COUNTER_DESCRIPTION)
    @Timed(value = GETS_TIMER_NAME, description = GETS_TIMER_DESCRIPTION, histogram = true)
    public String getMessage(@PathParam("name") String name) {
        return String.format("Hello %s", name);
    }]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    private void countAccess(ServerRequest request, ServerResponse response) {
        requestCounter.increment();
        request.next();
    }]]></value>
                                    </list>
                                    <list key="SimpleGreetResource-update" if="${ROOT.flavor} == 'se'">
                                        <value><![CDATA[        rules.get("/greet-count", this::countAccess, this::getDefaultMessageHandler);]]></value>
                                    </list>
                                    <list key="Main-helidon-imports">
                                        <value>io.helidon.integrations.micrometer.MicrometerSupport</value>
                                    </list>
                                    <list key="Main-createRouting">
                                        <value><![CDATA[        MicrometerSupport micrometerSupport = MicrometerSupport.create();]]></value>
                                    </list>
                                    <list key="Main-routingBuilder">
                                        <value><![CDATA[                .register(micrometerSupport)
                .register("/micrometer-greet", new SimpleGreetService(config, micrometerSupport.registry()))]]></value>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Test
    public void testMicrometerMetrics() {
        String message = target.path("simple-greet/Joe")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Joe"));
        Counter counter = registry.counter("personalizedGets");
        double before = counter.count();

        message = target.path("simple-greet/Eric")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Eric"));
        double after = counter.count();
        assertEquals(1d, after - before, "Difference in personalized greeting counter between successive calls");
    }]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    @Test
    public void testMicrometerMetrics() {
        String get = webClient.get()
                .path("/micrometer-greet/greet-count")
                .request(String.class)
                .await();

        assertThat(get, containsString("Hello World!"));

        String openMetricsOutput = webClient.get()
                .path("/micrometer")
                .request(String.class)
                .await();

        assertThat("Metrics output", openMetricsOutput, containsString("allRequests_total 1"));
    }]]></value>
                                    </list>
                                    <list key="MainTest-static-fields">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Inject
    private MeterRegistry registry;]]></value>
                                    </list>
                                    <list key="MainTest-java-imports">
                                        <value if="${ROOT.flavor} == 'mp'">io.micrometer.core.instrument.Counter</value>
                                        <value if="${ROOT.flavor} == 'mp'">io.micrometer.core.instrument.MeterRegistry</value>
                                    </list>
                                    <list key="MainTest-static-imports">
                                        <value if="${ROOT.flavor} == 'mp'">static org.junit.jupiter.api.Assertions.assertEquals</value>
                                        <value if="${ROOT.flavor} == 'se'">static org.hamcrest.Matchers.containsString</value>
                                    </list>
                                    <list key="readme-sections">
                                        <value><![CDATA[
## Using Micrometer

Access the `/micrometer` endpoint which reports the newly-added timer and counter.

```bash
curl http://localhost:8080/micrometer
```
`SimpleGreetService` has a micrometer counter that is incremented each time a GET request is made at
`http://localhost:8080/greet-count`. The counter name is `allRequests` and is shown in the console
with the number of time it was triggered.

```
curl http://localhost:8080/micrometer
# HELP allRequests_total
# TYPE allRequests_total counter
allRequests_total 0.0
```
]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                    <boolean id="builtin"
                             name="Built-in Metrics"
                             description="Expose common metrics"
                             default="true"
                             optional="true">
                        <output>
                            <model>
                                <list key="dependencies">
                                    <map if="${ROOT.flavor} == 'mp'">
                                        <value key="groupId">io.helidon.microprofile.metrics</value>
                                        <value key="artifactId">helidon-microprofile-metrics</value>
                                    </map>
                                    <map if="${ROOT.flavor} == 'se'">
                                        <value key="groupId">io.helidon.metrics</value>
                                        <value key="artifactId">helidon-metrics</value>
                                    </map>
                                </list>
                                <list key="Main-helidon-imports">
                                    <value>io.helidon.metrics.MetricsSupport</value>
                                </list>
                                <list key="Main-routingBuilder">
                                    <value><![CDATA[                .register(MetricsSupport.create()) // Metrics at "/metrics"]]></value>
                                </list>
                                <list key="MainTest-methods">
                                    <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Test
    public void testMetrics() throws Exception {
        Response response = target
                .path("metrics")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]></value>
                                    <value if="${ROOT.flavor} == 'se'"><![CDATA[
    @Test
    public void testMetrics() throws Exception {
        WebClientResponse response = webClient.get()
                .path("/metrics")
                .request()
                .await();
        assertThat(response.status().code(), is(200));
    }]]></value>
                                </list>
                                <list key="readme-sections">
                                    <value><![CDATA[
## Try metrics

```
# Prometheus Format
curl -s -X GET http://localhost:8080/metrics
# TYPE base:gc_g1_young_generation_count gauge
. . .

# JSON Format
curl -H 'Accept: application/json' -X GET http://localhost:8080/metrics
{"base":...
. . .
```

]]></value>
                                </list>
                            </model>
                        </output>
                    </boolean>
                </inputs>
            </boolean>
            <boolean id="health"
                     name="Health Checks"
                     description="Monitor your application’s health"
                     default="false"
                     optional="true">
                <inputs>
                    <boolean id="builtin"
                             name="Built-in Health Checks"
                             description="Report common health check statuses"
                             default="true"
                             optional="true">
                        <output>
                            <model>
                                <list key="dependencies">
                                    <map if="${ROOT.flavor} == 'mp'">
                                        <value key="groupId">io.helidon.microprofile.health</value>
                                        <value key="artifactId">helidon-microprofile-health</value>
                                    </map>
                                    <map if="${ROOT.flavor} == 'se'">
                                        <value key="groupId">io.helidon.health</value>
                                        <value key="artifactId">helidon-health</value>
                                    </map>
                                    <map if="${ROOT.flavor} == 'se'">
                                        <value key="groupId">io.helidon.health</value>
                                        <value key="artifactId">helidon-health-checks</value>
                                    </map>
                                </list>
                                <list key="Main-helidon-imports">
                                    <value>io.helidon.health.HealthSupport</value>
                                    <value>io.helidon.health.checks.HealthChecks</value>
                                </list>
                                <list key="Main-createRouting">
                                    <value template="mustache" order="0"><![CDATA[
        HealthSupport health = HealthSupport.builder()
                .addLiveness(HealthChecks.healthChecks()) // Adds a convenient set of checks
{{#Main-healthBuilder}}
{{.}}
{{/Main-healthBuilder}}
                .build();]]>
                                    </value>
                                </list>
                                <list key="Main-routingBuilder">
                                    <value><![CDATA[                .register(health) // Health at "/health"]]></value>
                                </list>
                                <list key="MainTest-methods">
                                    <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Test
    public void testHealth() throws Exception {
        Response response = target
                .path("health")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]></value>
                                    <value if="${ROOT.flavor} == 'se'"><![CDATA[
    @Test
    public void testHealth() throws Exception {
        WebClientResponse response = webClient.get()
                .path("health")
                .request()
                .await();
        assertThat(response.status().code(), is(200));
    }]]></value>
                                </list>
                                <list key="readme-sections">
                                    <value><![CDATA[
## Try health

```
curl -s -X GET http://localhost:8080/health
{"outcome":"UP",...

```

]]></value>
                                </list>
                            </model>
                        </output>
                    </boolean>
                </inputs>
            </boolean>
            <boolean id="tracing"
                     name="Tracing"
                     description="Distributed tracing system"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="provider"
                          name="Select a Tracing Provider"
                          default="jaeger"
                          optional="true">
                        <option value="jaeger"
                                name="Jaeger"
                                description="Send traces to a Jaeger backend" >
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.tracing</value>
                                            <value key="artifactId">helidon-tracing-jaeger</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.metrics</value>
                                            <value key="artifactId">helidon-metrics-jaeger</value>
                                            <value key="scope">runtime</value>
                                        </map>
                                    </list>
                                    <list key="app-yaml-content">
                                        <value><![CDATA[
tracing:
    service: "helidon-full-http"
    protocol: "https"     # JAEGER_ENDPOINT (if not udp, http is expected and endpoint is filled)
    host: "192.168.1.3"   # JAEGER_ENDPOINT
    port: 14240           # JAEGER_ENDPOINT
    path: "/api/traces/mine"   # JAEGER_ENDPOINT
    token: "token"        # JAEGER_AUTH_TOKEN
    # Either token or username/password
    #username:  "user"     # JAEGER_USER
    #password: "pass"      # JAEGER_PASSWORD
    propagation: "jaeger" # JAEGER_PROPAGATION either "jaeger" or "b3"
    log-spans: false      # JAEGER_REPORTER_LOG_SPANS
    max-queue-size: 42    # JAEGER_REPORTER_MAX_QUEUE_SIZE
    flush-interval-ms: 10001 # JAEGER_REPORTER_FLUSH_INTERVAL
    sampler-type: "remote"# JAEGER_SAMPLER_TYPE (https://www.jaegertracing.io/docs/latest/sampling/#client-sampling-configuration)
    sampler-param: 0.5    # JAEGER_SAMPLER_PARAM (number)
    sampler-manager: "localhost:47877" # JAEGER_SAMPLER_MANAGER_HOST_PORT
    tags:
      tag1: "tag1-value"  # JAEGER_TAGS
      tag2: "tag2-value"  # JAEGER_TAGS
    boolean-tags:
      tag3: true          # JAEGER_TAGS
      tag4: false         # JAEGER_TAGS
    int-tags:
      tag5: 145           # JAEGER_TAGS
      tag6: 741           # JAEGER_TAGS]]></value>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value if="${ROOT.flavor} == 'mp'"><![CDATA[
    @Test
    public void testMetricJaeger() {
        Response response = target
                .path("metrics/vendor")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]></value>
                                        <value if="${ROOT.flavor} == 'se'"><![CDATA[
    @Test
    public void testMetricJaeger() {
        WebClientResponse response = webClient.get()
                .path("metrics/vendor")
                .request()
                .await();
        assertThat(response.status().code(), is(200));
    }]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="zipkin"
                                name="Zipkin"
                                description="Send traces to a Zipkin backend">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.tracing</value>
                                            <value key="artifactId">helidon-tracing-zipkin</value>
                                        </map>
                                    </list>
                                    <list key="app-yaml-content">
                                        <value><![CDATA[
tracing:
  zipkin:
    service: "helidon-service"
    protocol: "https"
    host: "192.168.1.1"
    port: 9987
    api-version: 1
    # this is the default path for API version 2
    path: "/api/v2/spans"
    tags:
      tag1: "tag1-value"
      tag2: "tag2-value"
    boolean-tags:
      tag3: true
      tag4: false
    int-tags:
      tag5: 145
      tag6: 741]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                </inputs>
            </boolean>
        </inputs>
        <output>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/609 -->
            <model>
                <value key="metrics" if="${metrics}">true</value>
                <value key="metrics.provider" if="${metrics}">${metrics.provider}</value>
                <value key="metrics.builtin" if="${metrics}">${metrics.builtin}</value>
                <value key="health" if="${health}">true</value>
                <value key="health.builtin" if="${health}">${health.builtin}</value>
                <value key="tracing" if="${tracing}">true</value>
                <value key="tracing.provider" if="${tracing}">${tracing.provider}</value>
            </model>
        </output>
    </step>
</archetype-script>
