<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Observability" optional="true">
        <inputs>
            <boolean id="metrics"
                     name="Metrics"
                     description="Collect application metrics"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="provider"
                          name="Select a Metrics Provider"
                          default="microprofile"
                          optional="true"
                          if="${flavor} == 'mp'">
                        <option value="microprofile"
                                name="MicroProfile"
                                description="Expose metrics using the MicroProfile API">
                            <output>
                                <model>
                                    <list key="readme-sections">
                                        <value><![CDATA[
## Try metrics

```
# Prometheus Format
curl -s -X GET http://localhost:8080/metrics
# TYPE base:gc_g1_young_generation_count gauge
. . .

# JSON Format
curl -H 'Accept: application/json' -X GET http://localhost:8080/metrics
{"base":...
. . .
```

]]></value>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">org.eclipse.microprofile.metrics</value>
                                            <value key="artifactId">microprofile-metrics-api</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.microprofile.metrics</value>
                                            <value key="artifactId">helidon-microprofile-metrics</value>
                                        </map>
                                    </list>
                                    <list key="SimpleGreetService-imports">
                                        <value>org.eclipse.microprofile.metrics.MetricUnits</value>
                                        <value>org.eclipse.microprofile.metrics.annotation.Counted</value>
                                        <value>org.eclipse.microprofile.metrics.annotation.Timed</value>
                                        <value>jakarta.ws.rs.PathParam</value>
                                    </list>
                                    <list key="SimpleGreetResource-static-fields">
                                        <value><![CDATA[
    private static final String PERSONALIZED_GETS_COUNTER_NAME = "personalizedGets";
    private static final String PERSONALIZED_GETS_COUNTER_DESCRIPTION = "Counts personalized GET operations";
    private static final String GETS_TIMER_NAME = "allGets";
    private static final String GETS_TIMER_DESCRIPTION = "Tracks all GET operations";]]></value>
                                    </list>
                                    <list key="SimpleGreetService-methods">
                                        <value><![CDATA[
    @Path("/{name}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Counted(name = PERSONALIZED_GETS_COUNTER_NAME,
             absolute = true,
             description = PERSONALIZED_GETS_COUNTER_DESCRIPTION)
    @Timed(name = GETS_TIMER_NAME,
           description = GETS_TIMER_DESCRIPTION,
           unit = MetricUnits.SECONDS,
           absolute = true)
    public String getMessage(@PathParam("name") String name) {
        return String.format("Hello %s", name);
    }]]></value>
                                    </list>
                                    <list key="MainTest-java-imports">
                                        <value>org.eclipse.microprofile.metrics.Counter</value>
                                        <value>org.eclipse.microprofile.metrics.MetricRegistry</value>
                                    </list>
                                    <list key="MainTest-helidon-imports">
                                        <value>io.helidon.metrics.api.MetricsFactory</value>
                                    </list>
                                    <list key="MainTest-other-imports">
                                        <value>org.junit.jupiter.api.BeforeAll</value>
                                    </list>
                                    <list key="MainTest-static-imports">
                                        <value>static org.junit.jupiter.api.Assertions.assertEquals</value>
                                    </list>
                                    <list key="MainTest-methods" order="999">
                                        <value><![CDATA[
    @BeforeAll
    static void clear() {
        MetricsFactory.closeAll();
    }
]]></value>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value><![CDATA[
    @Test
    void testMicroprofileMetrics() {
        String message = target.path("simple-greet/Joe")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Joe"));
        Counter counter = registry.counter("personalizedGets");
        double before = counter.getCount();

        message = target.path("simple-greet/Eric")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Eric"));
        double after = counter.getCount();
        assertEquals(1d, after - before, "Difference in personalized greeting counter between successive calls");
    }]]></value>
                                    </list>
                                    <list key="MainTest-static-fields">
                                        <value><![CDATA[
    @Inject
    private MetricRegistry registry;]]></value>
                                    </list>
                                    <list key="modules">
                                        <value>io.helidon.microprofile.metrics</value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="micrometer"
                                name="Micrometer"
                                description="Expose metrics using the Micrometer API">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.webserver.observe</value>
                                            <value key="artifactId">helidon-webserver-observe-metrics</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.metrics</value>
                                            <value key="artifactId">helidon-metrics-system-meters</value>
                                            <value key="scope">runtime</value>
                                        </map>
                                        <map>
                                            <value key="groupId">org.eclipse.microprofile.metrics</value>
                                            <value key="artifactId">microprofile-metrics-api</value>
                                        </map>
                                    </list>
                                    <list key="SimpleGreetService-imports">
                                        <value>org.eclipse.microprofile.metrics.annotation.Counted</value>
                                        <value>org.eclipse.microprofile.metrics.annotation.Timed</value>
                                        <value>jakarta.ws.rs.PathParam</value>
                                    </list>
                                    <list key="SimpleGreetResource-static-fields">
                                        <value><![CDATA[
    private static final String PERSONALIZED_GETS_COUNTER_NAME = "personalizedGets";
    private static final String PERSONALIZED_GETS_COUNTER_DESCRIPTION = "Counts personalized GET operations";
    private static final String GETS_TIMER_NAME = "allGets";
    private static final String GETS_TIMER_DESCRIPTION = "Tracks all GET operations";]]></value>
                                    </list>
                                    <list key="SimpleGreetService-methods">
                                        <value><![CDATA[
    @Path("/{name}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Counted(name = PERSONALIZED_GETS_COUNTER_NAME, description = PERSONALIZED_GETS_COUNTER_DESCRIPTION, absolute = true)
    @Timed(name = GETS_TIMER_NAME, description = GETS_TIMER_DESCRIPTION, absolute = true)
    public String getMessage(@PathParam("name") String name) {
        return String.format("Hello %s", name);
    }]]></value>
                                    </list>
                                    <list key="MainTest-java-imports">
                                        <value>org.eclipse.microprofile.metrics.Counter</value>
                                        <value>org.eclipse.microprofile.metrics.MetricRegistry</value>
                                    </list>
                                    <list key="MainTest-helidon-imports">
                                        <value>io.helidon.metrics.api.MetricsFactory</value>
                                    </list>
                                    <list key="MainTest-other-imports">
                                        <value>org.junit.jupiter.api.BeforeAll</value>
                                    </list>
                                    <list key="MainTest-static-fields">
                                        <value><![CDATA[
    @Inject
    private MetricRegistry registry;]]></value>
                                    </list>
                                    <list key="MainTest-methods" order="999">
                                        <value><![CDATA[
    @BeforeAll
    static void clear() {
        MetricsFactory.closeAll();
    }
]]></value>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value><![CDATA[
    @Test
    void testMicrometerMetrics() {
        String message = target.path("simple-greet/Joe")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Joe"));
        Counter counter = registry.counter("personalizedGets");
        double before = counter.getCount();

        message = target.path("simple-greet/Eric")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Eric"));
        double after = counter.getCount();
        assertEquals(1d, after - before, "Difference in personalized greeting counter between successive calls");
    }]]></value>
                                    </list>
                                    <list key="MainTest-static-imports">
                                        <value>static org.junit.jupiter.api.Assertions.assertEquals</value>
                                    </list>
                                    <list key="modules">
                                        <value>io.helidon.microprofile.metrics</value>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                    <boolean id="builtin"
                             name="Built-in Metrics"
                             description="Expose common metrics"
                             default="true"
                             optional="true">
                        <output>
                            <model>
                                <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                    <value>io.helidon.webserver.observe.ObserveFeature</value>
                                </list>
                                <list key="Main-server-builder" if="${flavor} == 'se'">
                                    <value>.addFeature(ObserveFeature.create())</value>
                                </list>
                                <list key="dependencies">
                                    <map if="${flavor} == 'se'">
                                        <value key="groupId">io.helidon.webserver.observe</value>
                                        <value key="artifactId">helidon-webserver-observe-metrics</value>
                                    </map>
                                    <map if="${flavor} == 'se'">
                                        <value key="groupId">io.helidon.metrics</value>
                                        <value key="artifactId">helidon-metrics-system-meters</value>
                                        <value key="scope">runtime</value>
                                    </map>
                                </list>
                                <list key="Abstract-tests" if="${flavor} == 'se'">
                                    <value><![CDATA[
    @Test
    void testMetricsObserver() {
        try (Http1ClientResponse response = client.get("/observe/metrics").request()) {
            assertThat(response.status(), is(Status.OK_200));
        }
    }
]]></value>
                                </list>
                                <list key="modules">
                                    <value if="${flavor} == 'se'">io.helidon.webserver.observe.metrics</value>
                                    <value if="${flavor} == 'se'">io.helidon.metrics.api</value>
                                </list>
                                <list key="readme-sections">
                                    <value><![CDATA[
## Try metrics

```
# Prometheus Format
curl -s -X GET http://localhost:8080/metrics
# TYPE base:gc_g1_young_generation_count gauge
. . .

# JSON Format
curl -H 'Accept: application/json' -X GET http://localhost:8080/metrics
{"base":...
. . .
```
]]></value>
                                </list>
                            </model>
                        </output>
                    </boolean>
                    <output>
                        <model>
                            <list key="application-yaml-entries">
                                <value><![CDATA[
metrics:
  permit-all: true
                                ]]></value>
                            </list><list key="config-test">
                                <value><![CDATA[
metrics:
  permit-all: true
                                ]]></value>
                            </list>
                        </model>
                    </output>
                </inputs>
            </boolean>
            <boolean id="health"
                     name="Health Checks"
                     description="Monitor your application’s health"
                     default="false"
                     optional="true">
                <inputs>
                    <boolean id="builtin"
                             name="Built-in Health Checks"
                             description="Report common health check statuses"
                             default="true"
                             optional="true">
                        <output>
                            <model>
                                <list key="dependencies" if="${flavor} == 'mp'">
                                    <map order="800">
                                        <value key="groupId">io.helidon.microprofile.health</value>
                                        <value key="artifactId">helidon-microprofile-health</value>
                                    </map>
                                </list>
                                <list key="Main-createRouting" if="${flavor} == 'mp'">
                                    <value template="mustache" order="0"><![CDATA[
        HealthObserver health = HealthObserver.builder()
                .addChecks(HealthChecks.healthChecks()) // Adds a convenient set of checks
{{#Main-healthBuilder}}
{{.}}
{{/Main-healthBuilder}}
                .build();]]>
                                    </value>
                                </list>
                                <list key="MainTest-methods" if="${flavor} == 'mp'">
                                    <value><![CDATA[
    @Test
    void testHealth() {
        Response response = target
                .path("health")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]></value>
                                </list>
                                <list key="readme-sections" if="${flavor} == 'mp'">
                                    <value><![CDATA[
## Try health

```
curl -s -X GET http://localhost:8080/health
{"outcome":"UP",...

```
]]></value>
                                </list>
                                <list key="dependencies" if="${flavor} == 'se'">
                                    <map order="800">
                                        <value key="groupId">io.helidon.webserver.observe</value>
                                        <value key="artifactId">helidon-webserver-observe-health</value>
                                    </map>
                                    <map order="800">
                                        <value key="groupId">io.helidon.health</value>
                                        <value key="artifactId">helidon-health-checks</value>
                                    </map>
                                </list>
                                <list key="Observe-feature-builder" if="${flavor} == 'se'">
                                    <value><![CDATA[.addObserver(HealthObserver.builder()
                                               .details(true)
                                               .useSystemServices(false)
                                               .addCheck(() -> HealthCheckResponse.builder()
                                                        .status(HealthCheckResponse.Status.UP)
                                                        .detail("time", System.currentTimeMillis())
                                                        .build(), HealthCheckType.READINESS)
                                               .addCheck(() -> HealthCheckResponse.builder()
                                                        .status(isStarted())
                                                        .detail("time", System.currentTimeMillis())
                                                        .build(), HealthCheckType.STARTUP)
                                               .build())]]></value>
                                </list>
                                <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                    <value>io.helidon.health.HealthCheckResponse</value>
                                    <value>io.helidon.health.HealthCheckType</value>
                                    <value>io.helidon.webserver.observe.health.HealthObserver</value>
                                </list>
                                <list key="MainTest-static-imports" if="${flavor} == 'se'">
                                    <value>org.hamcrest.CoreMatchers.containsString</value>
                                </list>
                                <list key="Main-java-imports" if="${flavor} == 'se'">
                                    <value>java.time.Duration</value>
                                </list>
                                <list key="main-class-fields" if="${flavor} == 'se'">
                                    <value><![CDATA[    private static long serverStartTime;]]></value>
                                </list>
                                <list key="Main-main" if="${flavor} == 'se'">
                                    <value><![CDATA[serverStartTime = System.currentTimeMillis();]]></value>
                                </list>
                                <list key="main-class-content" if="${flavor} == 'se'">
                                    <value><![CDATA[
    private static boolean isStarted() {
        return Duration.ofMillis(System.currentTimeMillis() - serverStartTime).getSeconds() >= 8;
    }
]]></value>
                                </list>
                                <list key="Abstract-test" if="${flavor} == 'se'">
                                    <value><![CDATA[
    @Test
    void testHealth() {
        try (Http1ClientResponse response = client.get("/observe/health").request()) {
            assertThat(response.status(), is(Status.OK_200));
            assertThat(response.as(String.class), containsString("status\":\"UP"));
        }
    }
]]></value>
                                </list>
                                <list key="readme-sections" if="${flavor} == 'se'">
                                    <value><![CDATA[
## Try health

This example shows the basics of using Helidon SE Health. It uses the
set of built-in health checks that Helidon provides plus defines a
custom health check.

Note the port number reported by the application.

Probe the health endpoints:

```bash
curl -X GET http://localhost:8080/observe/observe/health/
curl -X GET http://localhost:8080/observe/observe/health/ready
```

]]></value>
                                </list>
                                <list key="modules" if="${flavor} == 'se'">
                                    <value>io.helidon.webserver.observe.health</value>
                                    <value>io.helidon.health.checks</value>
                                </list>
                            </model>
                        </output>
                    </boolean>
                </inputs>
            </boolean>
            <boolean id="tracing"
                     name="Tracing"
                     description="Distributed tracing system"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="provider"
                          name="Select a Tracing Provider"
                          default="jaeger"
                          optional="true">
                        <option value="jaeger"
                                name="Jaeger"
                                description="Send traces to a Jaeger backend" >
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map order="800">
                                            <value key="groupId">io.helidon.tracing.providers</value>
                                            <value key="artifactId">helidon-tracing-providers-jaeger</value>
                                        </map>
                                    </list>
                                    <list key="readme-sections">
                                        <value file="/common/files/README.jaeger.md"/>
                                    </list>
                                    <list key="config-properties">
                                        <value>tracing.global=false</value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="zipkin"
                                name="Zipkin"
                                description="Send traces to a Zipkin backend">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map order="800">
                                            <value key="groupId">io.helidon.tracing.providers</value>
                                            <value key="artifactId">helidon-tracing-providers-zipkin</value>
                                        </map>
                                    </list>
                                    <list key="readme-sections">
                                        <value file="/common/files/README.zipkin.md"/>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                </inputs>
            </boolean>
        </inputs>
        <output>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/609 -->
            <model>
                <value key="metrics" if="${metrics}">true</value>
                <value key="metrics.provider" if="${metrics} &amp;&amp; ${flavor} == 'mp'">${metrics.provider}</value>
                <value key="metrics.builtin" if="${metrics}">${metrics.builtin}</value>
                <value key="health" if="${health}">true</value>
                <value key="health.builtin" if="${health}">${health.builtin}</value>
                <value key="tracing" if="${tracing}">true</value>
                <value key="tracing.provider" if="${tracing}">${tracing.provider}</value>
            </model>
        </output>
    </step>
</archetype-script>
