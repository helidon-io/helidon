<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <exec src="/common/common.xml"/>
    <source src="/common/sources.xml"/>
    <output>
        <model>
            <value key="mainClass">${package}.Main</value>
            <value key="parent-artifactId">helidon-se</value>
            <list key="dependencies">
                <map order="999">
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver</value>
                </map>
                <map order="999">
                    <value key="groupId">io.helidon.config</value>
                    <value key="artifactId">helidon-config-yaml</value>
                </map>
                <map order="0">
                    <value key="groupId">org.junit.jupiter</value>
                    <value key="artifactId">junit-jupiter-api</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">org.hamcrest</value>
                    <value key="artifactId">hamcrest-all</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">io.helidon.webserver.testing.junit5</value>
                    <value key="artifactId">helidon-webserver-testing-junit5</value>
                    <value key="scope">test</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.logging.common.LogConfig</value>
                <value>io.helidon.config.Config</value>
                <value>io.helidon.webserver.WebServer</value>
                <value>io.helidon.webserver.http.HttpRouting</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.http.Status</value>
                <value>io.helidon.config.Config</value>
                <value>io.helidon.webserver.testing.junit5.SetUpRoute</value>
                <value>io.helidon.webclient.http1.Http1Client</value>
                <value>io.helidon.webclient.http1.Http1ClientResponse</value>
                <value>io.helidon.webserver.http.HttpRouting</value>
            </list>
            <list key="MainTest-other-imports">
                <value>org.junit.jupiter.api.Test</value>
            </list>
            <list key="MainTest-static-imports">
                <value>org.hamcrest.MatcherAssert.assertThat</value>
                <value>org.hamcrest.Matchers.is</value>
            </list>
            <list key="GreetService-imports">
                <value>io.helidon.config.Config</value>
            </list>
            <list key="modules">
                <value>io.helidon.webserver</value>
                <value>io.helidon.http</value>
                <value>io.helidon.config</value>
            </list>
            <list key="Main-routing-builder">
                <value><![CDATA[.register("/greet", new GreetService())]]></value>
            </list>
            <list key="application-yaml-entries">
                <value><![CDATA[
app:
    greeting: "Hello"]]></value>
            </list>
            <list key="config-test">
                <value><![CDATA[
app:
    greeting: "Hello"]]></value>
            </list>
            <value key="main-class-javadoc"><![CDATA[
/**
 * The application main class.
 */]]></value>
            <value key="main-method-javadoc"><![CDATA[/**
     * Application main entry point.
     * @param args command line arguments.
     */]]></value>
            <list key="main-class-fields">
                <value order="0"><![CDATA[
   /**
     * Cannot be instantiated.
     */
   private Main() {
   }
]]></value>
            </list>
            <list key="main-method-content">
                <value template="mustache"><![CDATA[
         // load logging configuration
        LogConfig.configureRuntime();

        // initialize global config from default configuration
        Config config = Config.create();
        Config.global(config);

        {{#Main-main}}
        {{.}}
        {{/Main-main}}

        WebServer server = WebServer.builder()
                .config(Config.global().get("server"))
                {{#Main-server-builder}}
                {{.}}
                {{/Main-server-builder}}
                .routing(Main::routing)
                .build()
                .start();

        System.out.println("WEB server is up! http://localhost:" + server.port() + "/simple-greet");
                    ]]></value>
            </list>
            <list key="main-class-content">
                <value template="mustache"><![CDATA[
    /**
     * Updates HTTP Routing.
     */
    static void routing(HttpRouting.Builder routing) {
        Config config = Config.global();
        {{#Main-routing}}
        {{.}}
        {{/Main-routing}}

        routing
               {{#Main-routing-builder}}
               {{.}}{{#last}}; {{/last}}
               {{/Main-routing-builder}}
    }]]></value>
            </list>
        </model>
    </output>
</archetype-script>
