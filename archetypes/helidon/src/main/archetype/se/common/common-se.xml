<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <exec src="/common/common.xml"/>
    <source src="/common/sources.xml"/>
    <output>
        <templates engine="mustache" transformations="mustache,packaged">
            <directory>/common/files</directory>
            <includes>
                <include>src/**/Main.java.mustache</include>
            </includes>
        </templates>
        <model>
            <value key="mainClass">${package}.Main</value>
            <value key="parent-artifactId">helidon-se</value>
            <list key="dependencies">
                <map order="999">
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver</value>
                </map>
                <map order="999">
                    <value key="groupId">io.helidon.config</value>
                    <value key="artifactId">helidon-config-yaml</value>
                </map>
                <map order="0">
                    <value key="groupId">org.junit.jupiter</value>
                    <value key="artifactId">junit-jupiter-api</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">org.hamcrest</value>
                    <value key="artifactId">hamcrest-all</value>
                    <value key="scope">test</value>
                </map>
                <map if="!(${extra} contains 'webclient')" order="0">
                    <value key="groupId">io.helidon.webclient</value>
                    <value key="artifactId">helidon-webclient</value>
                    <value key="scope">test</value>
                </map>
                <map if="${extra} contains 'webclient'" order="0">
                    <value key="groupId">io.helidon.webclient</value>
                    <value key="artifactId">helidon-webclient</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.common.LogConfig</value>
                <value>io.helidon.common.reactive.Single</value>
                <value>io.helidon.config.Config</value>
                <value>io.helidon.webserver.Routing</value>
                <value>io.helidon.webserver.WebServer</value>
            </list>
            <list key="MainTest-java-imports">
                <value>java.util.concurrent.CompletableFuture</value>
                <value>java.util.concurrent.ExecutionException</value>
                <value>java.util.concurrent.TimeoutException</value>
                <value>java.util.concurrent.TimeUnit</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.common.http.Http</value>
                <value>io.helidon.webclient.WebClient</value>
                <value>io.helidon.webclient.WebClientResponse</value>
                <value>io.helidon.webserver.WebServer</value>
            </list>
            <list key="MainTest-other-imports">
                <value>org.junit.jupiter.api.AfterAll</value>
                <value>org.junit.jupiter.api.BeforeAll</value>
                <value>org.junit.jupiter.api.Test</value>
            </list>
            <list key="MainTest-static-imports">
                <value>static org.hamcrest.MatcherAssert.assertThat</value>
                <value>static org.hamcrest.Matchers.is</value>
            </list>
            <list key="module-requires">
                <value>io.helidon.webserver</value>
                <value>io.helidon.common.http</value>
                <value>io.helidon.config</value>
            </list>
            <value key="Main-class-javadoc"><![CDATA[
/**
 * The application main class.
 */]]>
            </value>
            <value key="Main-method-javadoc"><![CDATA[/**
     * Application main entry point.
     * @param args command line arguments.
     */]]>
            </value>
            <list key="Main-class-fields">
                <value order="0"><![CDATA[
   /**
     * Cannot be instantiated.
     */
   private Main() {
   }
]]>
                </value>
            </list>
            <list key="Main-method-content">
                <value><![CDATA[        startServer();]]>
                </value>
            </list>
            <list key="Main-class-content">
                <value template="mustache"><![CDATA[
    /**
     * Start the server.
     * @return the created {@link WebServer} instance
     */
    static Single<WebServer> startServer() {

        // load logging configuration
        LogConfig.configureRuntime();

        // By default this will pick up application.yaml from the classpath
        Config config = Config.create();

        WebServer server = WebServer.builder(createRouting(config))
                .config(config.get("server"))
{{#Main-serverBuilder}}
{{.}}
{{/Main-serverBuilder}}
                .build();

        Single<WebServer> webserver = server.start();

        // Try to start the server. If successful, print some info and arrange to
        // print a message at shutdown. If unsuccessful, print the exception.
        webserver.forSingle(ws -> {
            {{Main-readyMessage}}
            ws.whenShutdown().thenRun(() -> System.out.println("WEB server is DOWN. Good bye!"));
        })
        .exceptionallyAccept(t -> {
            System.err.println("Startup failed: " + t.getMessage());
            t.printStackTrace(System.err);
        });

        return webserver;
    }

    /**
     * Creates new {@link Routing}.
     *
     * @return routing configured with JSON support, a health check, and a service
     * @param config configuration of this server
     */
    private static Routing createRouting(Config config) {
{{#Main-createRouting}}
{{.}}
{{/Main-createRouting}}

        Routing.Builder builder = Routing.builder()
{{#Main-routingBuilder}}
{{.}}{{#last}}; {{/last}}
{{/Main-routingBuilder}}

{{#Main-security-routing-section}}
{{.}}
{{/Main-security-routing-section}}

        return builder.build();
    }]]>
                </value>
            </list>
        </model>
    </output>
</archetype-script>
