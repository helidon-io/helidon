<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <output>
        <model>
<!-- JSONP -->
            <list key="MainTest-java-imports" if="${json} == 'jsonp'">
                <value>java.util.Collections</value>
                <value>jakarta.json.Json</value>
                <value>jakarta.json.JsonBuilderFactory</value>
                <value>jakarta.json.JsonObject</value>
            </list>
            <list key="MainTest-static-fields" if="${json} == 'jsonp'">
                <value><![CDATA[    private static final JsonBuilderFactory JSON_BUILDER = Json.createBuilderFactory(Collections.emptyMap());]]></value>
                <value><![CDATA[    private static final JsonObject TEST_JSON_OBJECT = JSON_BUILDER.createObjectBuilder()
                .add("greeting", "Hola")
                .build();]]></value>
            </list>
            <list key="MainTest-methods" if="${json} == 'jsonp'">
                <value><![CDATA[    @Test
    public void testGreetings() {
        JsonObject jsonObject;
        WebClientResponse response;

        jsonObject = webClient.get()
                .path("/greet/Joe")
                .request(JsonObject.class)
                .await();
        assertThat(jsonObject.getString("message"), is("Hello Joe!"));

        response = webClient.put()
                .path("/greet/greeting")
                .submit(TEST_JSON_OBJECT)
                .await();
        assertThat(response.status().code(), is(204));

        jsonObject = webClient.get()
                .path("/greet/Joe")
                .request(JsonObject.class)
                .await();
        assertThat(jsonObject.getString("message"), is("Hola Joe!"));
    }]]></value>
            </list>
<!-- JACKSON -->
            <list key="MainTest-other-imports" if="${json} == 'jackson'">
                <value>com.fasterxml.jackson.databind.ObjectMapper</value>
                <value>com.fasterxml.jackson.databind.node.ObjectNode</value>
            </list>
            <list key="MainTest-static-fields" if="${json} == 'jackson'">
                <value><![CDATA[    private static final ObjectMapper MAPPER = new ObjectMapper();]]></value>
            </list>
            <list key="MainTest-methods" if="${json} == 'jackson'">
                <value><![CDATA[    @Test
    public void testGreetings() {
        ObjectNode json;
        ObjectNode jsonGreeting = MAPPER.createObjectNode().put("greeting", "Hola");
        WebClientResponse response;

        json = webClient.get()
                .path("/greet/Joe")
                .request(ObjectNode.class)
                .await();
        assertThat(json.get("message").asText(), is("Hello Joe!"));

        response = webClient.put()
                .path("/greet/greeting")
                .submit(jsonGreeting)
                .await();
        assertThat(response.status().code(), is(204));

        json = webClient.get()
                .path("/greet/Joe")
                .request(ObjectNode.class)
                .await();
        assertThat(json.get("message").asText(), is("Hola Joe!"));
    }]]></value>
            </list>
<!-- JSONB -->
            <list key="MainTest-methods" if="${json} == 'jsonb'">
                <value><![CDATA[    @Test
    public void testGreetings() {
        Message json;
        Message jsonGreeting = new Message(null, "Hola");
        WebClientResponse response;

        json = webClient.get()
                .path("/greet/Joe")
                .request(Message.class)
                .await();
        assertThat(json.getMessage(), is("Hello Joe!"));

        response = webClient.put()
                .path("/greet/greeting")
                .submit(jsonGreeting)
                .await();
        assertThat(response.status().code(), is(204));

        json = webClient.get()
                .path("/greet/Joe")
                .request(Message.class)
                .await();
        assertThat(json.getMessage(), is("Hola Joe!"));
    }]]></value>
            </list>
        </model>
    </output>
</archetype-script>
