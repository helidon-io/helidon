<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <step name="Database" optional="true">
        <inputs>
            <boolean id="db"
                     name="Database Support"
                     description="Manage data in your application"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="server" name="Select a Database Server" default="h2" optional="true">
                        <option value="h2" name="H2" description="In-memory relational database">
                            <output>
                                <model>
                                    <value key="readme-description">Helidon SE application that uses the dbclient API with an in-memory H2 database.</value>
                                    <value key="readme-native-docker">docker run -d -p 1521:1521 -p 81:81 -e H2_OPTIONS='-ifNotExists' --name=h2 oscarfonts/h2</value>
                                    <value key="readme-native-url">javax.sql.DataSource.test.dataSource.url=jdbc:h2:tcp://localhost:1521/test</value>
                                    <value key="integration-artifactId">h2</value>
                                    <value key="db">H2</value>
                                    <list key="readme-run-notes">
                                        <value><![CDATA[
This example requires a database.
Instructions for H2 can be found here: https://www.h2database.com/html/cheatSheet.html
]]></value>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.integrations.db</value>
                                            <value key="artifactId">h2</value>
                                        </map>
                                    </list>
                                    <list key="db-connection">
                                        <value><![CDATA[    url: jdbc:h2:~/test
    # Server mode, run: docker run --rm --name h2 -p 9092:9082 -p 8082:8082 nemerosa/h2
#   url: "jdbc:h2:tcp://localhost:9092/~test"
    username: sa
    password:
    poolName: h2]]></value>
                                    </list>
                                    <value key="start-db"><![CDATA[
H2:
```
docker run --rm --name h2 -p 9092:9082 -p 8082:8082 nemerosa/h2
```
For details, see http://www.h2database.com/html/cheatSheet.html]]></value>
                                </model>
                            </output>
                        </option>
                        <option value="mysql" name="MySQL" description="Relational database">
                            <output>
                                <model>
                                    <value key="helidon-test">false</value>
                                    <value key="readme-description">Helidon SE application that uses the dbclient API with MySQL database.</value>
                                    <value key="readme-native-docker">docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7</value>
                                    <value key="readme-native-url">url: jdbc:mysql:tcp://127.0.0.1:3306/pokemon?useSSL=false</value>
                                    <value key="integration-artifactId">helidon-integrations-db-mysql</value>
                                    <value key="db">MySQL</value>
                                    <list key="readme-run-notes">
                                        <value><![CDATA[
This example requires a MySQL database, start it using docker:

```
docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7
```
]]></value>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">mysql</value>
                                            <value key="artifactId">mysql-connector-java</value>
                                        </map>
                                    </list>
                                    <list key="db-connection">
                                        <value><![CDATA[    # docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \
    #   -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7
    url: jdbc:mysql://127.0.0.1:3306/pokemon?useSSL=false
    username: user
    password: password
    poolName: mysql]]></value>
                                    </list>
                                    <value key="start-db"><![CDATA[
MySQL:
```
docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \
       -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7
```
]]></value>
                                </model>
                            </output>
                        </option>
                        <option value="oracledb" name="Oracle DB" description="Multi-model database">
                            <output>
                                <model>
                                    <value key="helidon-test">false</value>
                                    <value key="readme-description">Helidon se application that uses the dbclient API with OracleDB database.</value>
                                    <value key="readme-native-docker">docker run --rm --name xe -p 1521:1521 -p 8888:8080 -e ORACLE_PWD=oracle wnameless/oracle-xe-11g-r2</value>
                                    <value key="readme-native-url">url: jdbc:oracle:thin:@localhost:1521/XE</value>
                                    <value key="integration-artifactId">ojdbc</value>
                                    <value key="db">OracleDB</value>
                                    <list key="readme-run-notes">
                                        <value><![CDATA[
This example requires a oracleDB database, start it using docker:

```
docker run --rm --name xe -p 1521:1521 -p 8888:8080 -e ORACLE_PWD=oracle wnameless/oracle-xe-11g-r2
```
]]></value>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.integrations.db</value>
                                            <value key="artifactId">ojdbc</value>
                                        </map>
                                    </list>
                                    <list key="db-connection">
                                        <value><![CDATA[    # docker run --rm --name xe -p 1521:1521 -p 8888:8080 -e ORACLE_PWD=oracle wnameless/oracle-xe-11g-r2
    url: jdbc:oracle:thin:@localhost:1521/XE
    username: system
    password: oracle
    poolName: oracle]]></value>
                                    </list>
                                    <value key="start-db"><![CDATA[
Oracle:
```
docker run --rm --name xe -p 1521:1521 -p 8888:8080 wnameless/oracle-xe-11g-r2
```
For details on an Oracle Docker image, see https://github.com/oracle/docker-images/tree/master/OracleDatabase/SingleInstance
]]></value>
                                </model>
                            </output>
                        </option>
                        <option value="mongodb" name="MongoDB" description="NoSQL / Document database">
                            <output>
                                <model>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.dbclient</value>
                                            <value key="artifactId">helidon-dbclient-mongodb</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.common</value>
                                            <value key="artifactId">helidon-common</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.dbclient</value>
                                            <value key="artifactId">helidon-dbclient-mongodb</value>
                                        </map>
                                        <map>
                                            <value key="groupId">io.helidon.common</value>
                                            <value key="artifactId">helidon-common-mapper</value>
                                        </map>
                                    </list>
                                    <list key="Main-helidon-imports">
                                        <value>io.helidon.dbclient.DbClient</value>
                                        <value>io.helidon.dbclient.DbStatementType</value>
                                        <value>io.helidon.dbclient.metrics.DbClientMetrics</value>
                                        <value>io.helidon.dbclient.tracing.DbClientTracing</value>
                                        <value>io.helidon.webserver.observe.ObserveFeature</value>
                                        <value>io.helidon.webserver.tracing.TracingFeature</value>
                                        <value>io.helidon.tracing.Tracer</value>
                                        <value>io.helidon.tracing.TracerBuilder</value>
                                    </list>
                                    <list key="Main-routing">
                                        <value><![CDATA[
        Config dbConfig = config.get("db");

        DbClient dbClient = DbClient.builder(dbConfig)
                // add an interceptor to named statement(s)
                .addService(DbClientMetrics.counter().statementNames("select-all", "select-one"))
                // add an interceptor to statement type(s)
                .addService(DbClientMetrics.timer()
                        .statementTypes(DbStatementType.DELETE, DbStatementType.UPDATE, DbStatementType.INSERT))
                // add an interceptor to all statements
                .addService(DbClientTracing.create())
                .build();

        Tracer tracer = TracerBuilder.create("mongo-db").build();
]]></value>
                                    </list>
                                    <list key="Main-routing-builder">
                                        <value><![CDATA[.register("/db", new PokemonService(dbClient))
                .addFeature(TracingFeature.create(tracer))]]></value>
                                    </list>
                                    <list key="application-yaml-entries">
                                        <value><![CDATA[
# docker run --rm --name mongo -p 27017:27017 mongo
db:
  source: "mongoDb"
  connection:
    url: "mongodb://127.0.0.1:27017/pokemon"
  health-check:
    type: "query"
    statementName: "health-check"
  statements:
    # Health check statement. HealthCheck statement type must be query.
    health-check: '{
            "operation": "command",
            "query": { ping: 1 }
        }'
    # Insert operation contains collection name, operation type and data to be inserted.
    # Name variable is stored as MongoDB primary key attribute _id
    insert2: '{
            "collection": "pokemons",
            "value": {
                "_id": $name,
                "type": $type
            }
        }'
    select-all: '{
            "collection": "pokemons",
            "query": {}
        }'
    select-one: '{
            "collection": "pokemons",
            "query": {
              "_id": ?
            }
        }'
    delete-all: '{
            "collection": "pokemons",
            "operation": "delete"
        }'
    update: '{
            "collection": "pokemons",
            "query": {
                "_id": $name
            },
            "value": {
                $set: { "type": $type }
            }
        }'
    delete: '{
            "collection": "pokemons",
            "query": {
                "_id": ?
            }
        }'
]]></value>
                                    </list>
                                    <value key="start-db"><![CDATA[
```
docker run --rm --name mongo -p 27017:27017 mongo
```
]]></value>
                                </model>
                            </output>
                        </option>
                    </enum>
                </inputs>
                <output>
                    <templates engine="mustache" transformations="mustache,packaged,package-name">
                        <directory>../database/files</directory>
                        <includes>
                            <include>src/main/**</include>
                        </includes>
                    </templates>
                    <model>
                        <value key="database">true</value>
                        <value key="server">${server}</value>
                        <list key="dependencies">
                            <map if="${server} != 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-jdbc</value>
                            </map>
                            <map if="${server} != 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-hikari</value>
                            </map>
                            <map if="${server} != 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-metrics-hikari</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-jsonp</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-tracing</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-metrics</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-health</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.tracing</value>
                                <value key="artifactId">helidon-tracing</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.tracing.providers</value>
                                <value key="artifactId">helidon-tracing-providers-zipkin</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.http.media</value>
                                <value key="artifactId">helidon-http-media-jsonp</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.http.media</value>
                                <value key="artifactId">helidon-http-media-jsonb</value>
                            </map>
                            <map>
                                <value key="groupId">jakarta.json</value>
                                <value key="artifactId">jakarta.json-api</value>
                            </map>
                            <map>
                                <value key="groupId">org.slf4j</value>
                                <value key="artifactId">slf4j-jdk14</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.webserver.observe</value>
                                <value key="artifactId">helidon-webserver-observe-health</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.webserver.observe</value>
                                <value key="artifactId">helidon-webserver-observe-tracing</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.config</value>
                                <value key="artifactId">helidon-config-yaml</value>
                            </map>
                            <map if="${server} != 'h2'">
                                <value key="groupId">com.h2database</value>
                                <value key="artifactId">h2</value>
                                <value key="scope">test</value>
                            </map>
                            <map if="${server} == 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-jdbc</value>
                                <value key="scope">test</value>
                            </map>
                            <map if="${server} == 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-hikari</value>
                                <value key="scope">test</value>
                            </map>
                        </list>
                        <list key="Main-helidon-imports" if="${server} != 'mongo'">
                            <value>io.helidon.dbclient.DbClient</value>
                            <value>io.helidon.webserver.observe.ObserveFeature</value>
                            <value>io.helidon.webserver.tracing.TracingFeature</value>
                            <value>io.helidon.tracing.TracerBuilder</value>
                        </list>
                        <list key="Main-routing-builder" if="${server} != 'mongodb'">
                            <value><![CDATA[.register("/db", new PokemonService(DbClient.create(config.get("db"))))]]></value>
                        </list>
                        <list key="application-yaml-entries" if="${server} != 'mongodb'">
                            <value file="../database/files/application-jdbc.yaml.mustache" template="mustache"/>
                        </list>
                        <list key="config-test">
                            <value file="../database/files/application-test.yaml"/>
                        </list>
                        <list key="modules">
                            <value>io.helidon.dbclient</value>
                            <value>io.helidon.tracing</value>
                            <value>io.helidon.webserver.tracing</value>
                            <value>io.helidon.dbclient.metrics</value>
                            <value>io.helidon.dbclient.tracing</value>
                            <value if="${media.json-lib} == 'jackson'">jakarta.json</value>
                        </list>
                        <list key="readme-sections">
                            <value template="mustache"><![CDATA[
### Database Setup

In the `pom.xml` and `application.yaml` we provide configuration needed for {{server}} database.
Start your database before running this example.

Example docker commands to start databases in temporary containers:

{{start-db}}

### Exercise The Database Endpoints

```
curl -X GET http://localhost:8080/db
```
]]></value>
                        </list>
                    </model>
                </output>
            </boolean>
        </inputs>
    </step>
</archetype-script>
