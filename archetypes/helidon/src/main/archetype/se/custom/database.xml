<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Database" optional="true">
        <inputs>
            <boolean id="db"
                     name="Database Support"
                     description="Manage data in your application"
                     default="false"
                     optional="true">
                <inputs>
                    <enum id="server" name="Select a Database Server" default="h2" optional="true">
                        <option value="h2" name="H2" description="In-memory relational database">
                            <output>
                                <model>
                                    <list key="config-entries">
                                        <value file="files/application.h2.yaml"/>
                                    </list>
                                    <list key="config-test">
                                        <value file="files/application.h2.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">com.h2database</value>
                                            <value key="artifactId">h2</value>
                                        </map>
                                        <map>
                                            <value key="groupId">com.zaxxer</value>
                                            <value key="artifactId">HikariCP</value>
                                        </map>
                                    </list>
                                    <list key="MainTest-methods">
                                        <value><![CDATA[
    @Test
    public void testDocuments() throws Exception {
        final String docName = "myname";
        Document myDoc = new Document(docName, "txt");

        webClient.put()
                .path("/db")
                .submit(myDoc)
                .thenAccept(response -> assertThat(response.status(), is(Http.Status.OK_200)))
                .toCompletableFuture()
                .get();

        webClient.get()
                .path("/db")
                .request(JsonArray.class)
                .thenAccept(array -> assertThat(array.size(), is(1)))
                .toCompletableFuture()
                .get();

        webClient.delete()
                .path("/db/" + docName)
                .request()
                .thenAccept(response -> assertThat(response.status(), is(Http.Status.OK_200)))
                .toCompletableFuture()
                .get();
    }]]></value>
                                    </list>
                                    <list key="MainTest-other-imports">
                                        <value>jakarta.json.JsonArray</value>
                                    </list>
                                    <list key="MainTest-helidon-imports">
                                        <value>io.helidon.common.http.Http</value>
                                        <value>io.helidon.media.jsonp.JsonpSupport</value>
                                        <value>io.helidon.media.jsonb.JsonbSupport</value>
                                    </list>
                                    <list key="MainTest-clientBuilder">
                                        <value><![CDATA[                .addMediaSupport(JsonpSupport.create())
                .addMediaSupport(JsonbSupport.create())]]></value>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="mysql" name="MySQL" description="Relational database">
                            <output>
                                <model>
                                    <list key="config-entries">
                                        <value file="files/application.mysql.yaml"/>
                                    </list>
                                    <list key="config-test">
                                        <value file="files/application.mysql.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">mysql</value>
                                            <value key="artifactId">mysql-connector-java</value>
                                            <value key="scope">runtime</value>
                                        </map>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="oracledb" name="Oracle DB" description="Multi-model database">
                            <output>
                                <model>
                                    <list key="config-entries">
                                        <value file="files/application.oracledb.yaml"/>
                                    </list>
                                    <list key="config-test">
                                        <value file="files/application.oracledb.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.integrations.db</value>
                                            <value key="artifactId">ojdbc</value>
                                        </map>
                                    </list>
                                </model>
                            </output>
                        </option>
                        <option value="mongodb" name="MongoDB" description="NoSQL / Document database">
                            <output>
                                <model>
                                    <list key="config-entries">
                                        <value file="files/application.mongo.yaml"/>
                                    </list>
                                    <list key="config-test">
                                        <value file="files/application.mongo.yaml"/>
                                    </list>
                                    <list key="dependencies">
                                        <map>
                                            <value key="groupId">io.helidon.dbclient</value>
                                            <value key="artifactId">helidon-dbclient-mongodb</value>
                                        </map>
                                    </list>
                                </model>
                            </output>
                        </option>
                    </enum>
                </inputs>
                <output>
                    <templates engine="mustache" transformations="mustache,packaged">
                        <directory>files</directory>
                        <includes>
                            <include>src/*/java/**/Document.java.mustache</include>
                            <include>src/*/java/**/DatabaseService.java.mustache</include>
                            <include>src/*/java/**/DocumentMapperProvider.java.mustache</include>
                            <include>src/*/resources/**/io.helidon.dbclient.spi.DbMapperProvider.mustache</include>
                        </includes>
                    </templates>
                    <model>
                        <list key="dependencies">
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-jsonp</value>
                            </map>
                            <map>
                                <value key="groupId">io.helidon.media</value>
                                <value key="artifactId">helidon-media-jsonb</value>
                            </map>
                            <map if="${ROOT.db.server} != 'mongodb'">
                                <value key="groupId">io.helidon.dbclient</value>
                                <value key="artifactId">helidon-dbclient-jdbc</value>
                            </map>
                        </list>
                        <list key="Main-helidon-imports">
                            <value>io.helidon.dbclient.DbClient</value>
                            <value>io.helidon.media.jsonp.JsonpSupport</value>
                            <value>io.helidon.media.jsonb.JsonbSupport</value>
                        </list>
                        <list key="Main-serverBuilder">
                            <value><![CDATA[                .addMediaSupport(JsonbSupport.create())]]></value>
                            <value><![CDATA[                .addMediaSupport(JsonpSupport.create())]]></value>
                        </list>
                        <list key="Main-createRouting">
                            <value><![CDATA[        DbClient dbClient = DbClient.builder(config.get("db"))
                .build();]]></value>
                        </list>
                        <list key="Main-routingBuilder">
                            <value><![CDATA[                .register("/db", new DatabaseService(dbClient))]]></value>
                        </list>
                        <list key="DatabaseService-constructor" if="${ROOT.db.server} != 'mongodb'">
                            <value><![CDATA[
        dbClient.execute(handle -> handle.namedDml("create-table"))
                .thenAccept(System.out::println)
                .exceptionally(throwable -> {
                    LOGGER.log(Level.WARNING, "Failed to create table, maybe it already exists?", throwable);
                    return null;
                });]]></value>
                        </list>
                    </model>
                </output>
            </boolean>
        </inputs>
    </step>
</archetype-script>
