package {{package}};

import io.helidon.dbclient.DbColumn;
import io.helidon.dbclient.DbMapper;
import io.helidon.dbclient.DbRow;
import io.helidon.dbclient.spi.DbMapperProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class DocumentMapperProvider implements DbMapperProvider  {

    private static final DocumentMapper MAPPER = new DocumentMapper();

    @SuppressWarnings("unchecked")
    @Override
    public <T> Optional<DbMapper<T>> mapper(Class<T> type) {
        if (type.equals(Document.class)) {
            return Optional.of((DbMapper<T>) MAPPER);
        }
        return Optional.empty();
    }

    static class DocumentMapper implements DbMapper<Document> {

        @Override
        public Document read(DbRow row) {
            DbColumn name = row.column("name");
            // we know that in mongo this is not true
            if (null == name) {
                name = row.column("_id");
            }

            DbColumn extension = row.column("extension");
            return new Document(name.as(String.class), extension.as(String.class));
        }

        @Override
        public Map<String, Object> toNamedParameters(Document value) {
            Map<String, Object> map = new HashMap<>(1);
            map.put("name", value.getName());
            map.put("extension", value.getExtension());
            return map;
        }

        @Override
        public List<Object> toIndexedParameters(Document value) {
            List<Object> list = new ArrayList<>(2);
            list.add(value.getName());
            list.add(value.getExtension());
            return list;
        }
    }
}
