<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021, 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <source src="/common/sources.xml"/>
    <exec src="/common/presets.xml"/>
    <presets>
        <boolean path="db">true</boolean>
    </presets>
    <exec src="/se/custom/custom-se.xml"/>
    <output>
        <model>
            <value key="title">Helidon SE Database</value>
            <value key="readme-description">Helidon SE application that uses the dbclient API with an in-memory H2 database.</value>
            <list key="readme-sections">
                <value file="files/README.md" template="mustache"/>
            </list>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-jsonp</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-health</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-metrics-jdbc</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-metrics</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-tracing</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-mongodb</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.dbclient</value>
                    <value key="artifactId">helidon-dbclient-jdbc</value>
                </map>
                <map>
                    <value key="groupId">com.h2database</value>
                    <value key="artifactId">h2</value>
                    <value key="scope">runtime</value>
                </map>
                <map>
                    <value key="groupId">org.slf4j</value>
                    <value key="artifactId">slf4j-jdk14</value>
                </map>
                <map>
                    <value key="groupId">com.zaxxer</value>
                    <value key="artifactId">HikariCP</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.dbclient.DbClient</value>
                <value>io.helidon.dbclient.health.DbClientHealthCheck</value>
                <value>io.helidon.media.jsonp.JsonpSupport</value>
            </list>
            <list key="Main-serverBuilder">
                <value><![CDATA[            .addMediaSupport(JsonpSupport.create())]]></value>
            </list>
            <list key="Main-createRouting">
                <value><![CDATA[
        Config dbConfig = config.get("db");

        // Client services are added through a service loader
        DbClient dbClient = DbClient.builder(dbConfig).build();

        // Initialize database schema
        InitializeDb.init(dbClient);]]></value>
            </list>
            <list key="Main-healthBuilder">
                <value><![CDATA[                .addLiveness(DbClientHealthCheck.create(dbClient, dbConfig.get("health-check")))]]></value>
            </list>
            <list key="Main-routingBuilder">
                <value><![CDATA[                .register("/", new PokemonService(dbClient))]]></value>
            </list>
            <value key="Main-readyMessage">System.out.println("Database here : http://localhost:" + ws.port() + "/pokemon");</value>
            <list key="MainTest-java-imports">
                <value>java.util.Collections</value>
                <value>jakarta.json.Json</value>
                <value>jakarta.json.JsonBuilderFactory</value>
                <value>jakarta.json.JsonArray</value>
                <value>jakarta.json.JsonObject</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.media.jsonp.JsonpSupport</value>
            </list>
            <list key="MainTest-static-fields">
                <value><![CDATA[    private static final JsonBuilderFactory JSON_BUILDER = Json.createBuilderFactory(Collections.emptyMap());]]></value>
            </list>
            <list key="MainTest-clientBuilder">
                <value><![CDATA[                .addMediaSupport(JsonpSupport.create())]]></value>
            </list>
            <list key="config-entries">
                <value file="files/application.yaml"/>
            </list>
            <list key="MainTest-methods">
                <value><![CDATA[
    @Test
    public void testPokemonTypes() throws Exception {
        webClient.get()
                .path("/type")
                .request(JsonArray.class)
                .thenAccept(array -> {
                    assertThat(array.size(), is(18));
                    assertThat(array.get(0).asJsonObject().getInt("id"), is(1));
                    assertThat(array.get(0).asJsonObject().getString("name"), is("Normal"));
                })
                .toCompletableFuture()
                .get();
    }

    @Test
    public void testPokemons() throws Exception {
        assertThat(getPokemonCount(), is(6));

        webClient.get()
                .path("/pokemon/1")
                .request(JsonObject.class)
                .thenAccept(pokemon -> assertThat(pokemon.getString("NAME"), is("Bulbasaur")))
                .toCompletableFuture()
                .get();

        webClient.get()
                .path("/pokemon/name/Charmander")
                .request(JsonObject.class)
                .thenAccept(pokemon -> assertThat(pokemon.getJsonNumber("ID_TYPE").intValue(), is(10)))
                .toCompletableFuture()
                .get();

        JsonObject json = JSON_BUILDER.createObjectBuilder()
                .add("id", 100)
                .add("idType", 1)
                .add("name", "Test")
                .build();
        webClient.post()
                .path("/pokemon")
                .submit(json)
                .thenAccept(r -> assertThat(r.status(), is(Http.Status.OK_200)))
                .toCompletableFuture()
                .get();
        assertThat(getPokemonCount(), is(7));

        webClient.delete()
                .path("/pokemon/100")
                .request()
                .thenAccept(r -> assertThat(r.status(), is(Http.Status.OK_200)))
                .toCompletableFuture()
                .get();

        assertThat(getPokemonCount(), is(6));
    }

    private int getPokemonCount() throws Exception {
        CompletableFuture<Integer> result = new CompletableFuture<>();
        webClient.get()
                .path("/pokemon")
                .request(JsonArray.class)
                .thenAccept(array -> result.complete(array.size()));
        return result.get();
    }
                ]]></value>
            </list>
        </model>
    </output>
</archetype-script>
