db:
  source: jdbc
  connection:
    url: jdbc:h2:~/test
    # Server mode, run: docker run --rm --name h2 -p 9092:9082 -p 8082:8082 nemerosa/h2
    username: sa
    password:
    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
  helidon:
    pool-metrics:
      enabled: true
      # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
      name-prefix: "hikari."
  health-check:
    type: "query"
    statementName: "health-check"
  statements:
    # Health check query statement for MySQL and H2 databases
    #    health-check: "SELECT 0"
    # Health check query statement for Oracle database
    health-check: "SELECT 1 FROM DUAL"
    # Insert new pokemon
    create-table: "CREATE TABLE pokemons (name VARCHAR(64) NOT NULL PRIMARY KEY, type VARCHAR(32))"
    insert1: "INSERT INTO pokemons VALUES(?, ?)"
    insert2: "INSERT INTO pokemons VALUES(:name, :type)"
    select-by-type: "SELECT * FROM pokemons WHERE type = ?"
    select-one: "SELECT * FROM pokemons WHERE name = ?"
    select-all: "SELECT * FROM pokemons"
    select-for-update: "SELECT * FROM pokemons WHERE name = :name for UPDATE"
    update: "UPDATE pokemons SET type = :type WHERE name = :name"
    delete: "DELETE FROM pokemons WHERE name = ?"