<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <output>
        <model if="${health} || ${metrics} || ${tracing}">
            <list key="Main-helidon-imports">
                <value>io.helidon.webserver.observe.ObserveFeature</value>
            </list>
            <list key="Main-routing">
                <value template="mustache"><![CDATA[
        ObserveFeature observe = ObserveFeature.builder()
                                               .useSystemServices(true)
                                               {{#Observe-feature-builder}}
                                               {{.}}
                                               {{/Observe-feature-builder}}
                                               .build();
]]></value>
            </list>
            <list key="Main-routing-builder">
                <value>.addFeature(observe)</value>
            </list>
            <list key="dependencies">
                <map if="${health}">
                    <value key="groupId">io.helidon.webserver.observe</value>
                    <value key="artifactId">helidon-webserver-observe-health</value>
                </map>
                <map if="${health}">
                    <value key="groupId">io.helidon.health</value>
                    <value key="artifactId">helidon-health-checks</value>
                </map>
                <map if="${metrics}">
                    <value key="groupId">io.helidon.webserver.observe</value>
                    <value key="artifactId">helidon-webserver-observe-metrics</value>
                </map>
                <map if="${metrics}">
                    <value key="groupId">io.helidon.metrics</value>
                    <value key="artifactId">helidon-metrics</value>
                </map>
                <map if="${tracing}">
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver-tracing</value>
                </map>
                <map if="${tracing}">
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver-http2</value>
                </map>
            </list>
            <list key="Main-helidon-imports" if="${health}">
                <value>io.helidon.health.checks.DeadlockHealthCheck</value>
                <value>io.helidon.health.checks.DiskSpaceHealthCheck</value>
                <value>io.helidon.health.checks.HeapMemoryHealthCheck</value>
                <value>io.helidon.webserver.observe.health.HealthFeature</value>
                <value>io.helidon.webserver.observe.health.HealthObserveProvider</value>
            </list>
            <list key="Main-helidon-imports" if="${metrics}">
                <value>io.helidon.metrics.api.MetricsSettings</value>
                <value>io.helidon.webserver.observe.metrics.MetricsFeature</value>
                <value>io.helidon.webserver.observe.metrics.MetricsObserveProvider</value>
            </list>
            <list key="Main-helidon-imports" if="${tracing}">
                <value>io.helidon.webserver.http2.Http2Route</value>
                <value>io.helidon.webserver.http.Handler</value>
                <value>io.helidon.webserver.http.ServerRequest</value>
                <value>io.helidon.webserver.http.ServerResponse</value>
                <value>io.helidon.webserver.http1.Http1Route</value>
                <value>io.helidon.webserver.tracing.TracingFeature</value>
                <value>io.helidon.tracing.Span</value>
                <value>io.helidon.tracing.Tracer</value>
                <value>io.helidon.tracing.TracerBuilder</value>
            </list>
            <list key="Main-static-imports" if="${tracing}">
                <value>static io.helidon.http.Http.Method.GET</value>
            </list>
            <list key="Observe-feature-builder">
                <value if="${health}"><![CDATA[.addProvider(HealthObserveProvider.create(HealthFeature.builder()
                                               .addCheck(HeapMemoryHealthCheck.create())
                                               .addCheck(DiskSpaceHealthCheck.create())
                                               .addCheck(DeadlockHealthCheck.create())
                                               .build()))]]></value>
            </list>
            <list key="Main-routing-builder" if="${tracing}">
                <value if="${tracing}"><![CDATA[.addFeature(TracingFeature.create(tracer))
                .route(Http1Route.route(GET, "/versionspecific", new TracedHandler(tracer, "HTTP/1.1 route")))
                .route(Http2Route.route(GET, "/versionspecific", new TracedHandler(tracer, "HTTP/2 route")))]]></value>
            </list>
            <list key="Main-routing" if="${tracing}">
                <value><![CDATA[Tracer tracer = TracerBuilder.create("server").build();
]]></value>
            </list>
            <list key="Main-content" if="${tracing}">
                <value><![CDATA[
private static class TracedHandler implements Handler {
    private final Tracer tracer;
    private final String message;

    private TracedHandler(Tracer tracer, String message) {
        this.tracer = tracer;
        this.message = message;
    }

    @Override
    public void handle(ServerRequest req, ServerResponse res) {
        Span span = tracer.spanBuilder("custom-span")
                .start();
        try {
            span.addEvent("my nice log");
            res.send(message);
        } finally {
            span.end();
        }
    }
}
]]></value>
            </list>
            <list key="Abstract-tests">
                <value if="${health}"><![CDATA[
    @Test
    void testHealthObserver() {
        try (Http1ClientResponse response = client.get("/observe/health").request()) {
            assertThat(response.status(), is(Http.Status.NO_CONTENT_204));
        }
    }
]]></value>
                <value if="${metrics}"><![CDATA[
    @Test
    void testMetricsObserver() {
        try (Http1ClientResponse response = client.get("/observe/metrics").request()) {
            assertThat(response.status(), is(Http.Status.OK_200));
        }
    }
]]></value>
            </list>
            <list key="readme-sections" if="${metrics}">
                <value><![CDATA[
## Try metrics

```
# Prometheus Format
curl -s -X GET http://localhost:8080/observe/metrics
# TYPE base:gc_g1_young_generation_count gauge
. . .

# JSON Format
curl -H 'Accept: application/json' -X GET http://localhost:8080/observe/metrics
{"base":...
. . .
```

]]></value>
            </list>
            <list key="modules">
                <value>io.helidon.webserver.observe</value>
                <value if="${health}">io.helidon.webserver.observe.health</value>
                <value if="${health}">io.helidon.health.checks</value>
                <value if="${metrics}">io.helidon.webserver.observe.metrics</value>
                <value if="${metrics}">io.helidon.metrics.api</value>
                <value if="${tracing}">io.helidon.webserver.http2</value>
                <value if="${tracing}">io.helidon.webserver.tracing</value>
                <value if="${tracing}">io.helidon.tracing</value>
            </list>
        </model>
    </output>
</archetype-script>
