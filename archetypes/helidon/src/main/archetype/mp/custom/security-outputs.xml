<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <methods>
        <method name="security-oidc">
            <output if="${security.atn} contains ['oidc']">
                <templates engine="mustache" transformations="mustache,packaged">
                    <directory>files</directory>
                    <includes>
                        <include>**/OidcResource.java.mustache</include>
                    </includes>
                </templates>
                <model>
                    <list key="dependencies">
                        <map>
                            <value key="groupId">io.helidon.microprofile</value>
                            <value key="artifactId">helidon-microprofile-oidc</value>
                        </map>
                    </list>
                    <list key="providers-config-entries">
                        <value file="files/application.oidc.yaml"/>
                    </list>
                    <list key="module-requires">
                        <value>io.helidon.security</value>
                        <value>io.helidon.security.annotations</value>
                    </list>
                    <list key="readme-sections">
                        <value><![CDATA[
## Security integration with OIDC

This example demonstrates integration with OIDC (Open ID Connect) providers.

To configure it, you need to replace the default values from configuration
to your tenant and application configuration.
]]></value>
                    </list>
                </model>
            </output>
        </method>
        <method name="security-jwt">
            <output if="${security.atn} contains ['jwt']">
                <templates engine="mustache" transformations="mustache,packaged">
                    <directory>files</directory>
                    <includes>
                        <include>**/JwtApplication.java.mustache</include>
                        <include>**/JwtResource.java.mustache</include>
                    </includes>
                </templates>
                <model>
                    <list key="dependencies">
                        <map>
                            <value key="groupId">io.helidon.microprofile.jwt</value>
                            <value key="artifactId">helidon-microprofile-jwt-auth</value>
                        </map>
                    </list>
                    <list key="microprofile-config-entries">
                        <value>mp.jwt.verify.issuer=https://{IssuerPublicDomain}/oauth2/default</value>
                        <value template="mustache">mp.jwt.verify.publickey.location=${mp.jwt.verify.issuer}/v1/keys</value>
                    </list>
                    <list key="module-requires">
                        <value >io.helidon.microprofile.jwt.auth</value>
                    </list>
                </model>
            </output>
        </method>
        <method name="security-google">
            <output if="${security.atn} contains ['google']">
                <model>
                    <list key="providers-config-entries">
                        <value file="files/application.google.yaml"/>
                    </list>
                </model>
            </output>
        </method>
        <method name="security-signature">
            <output if="${security.atn} contains ['http-signature']">
                <model>
                    <list key="providers-config-entries">
                        <value file="files/application.http-signature.yaml"/>
                    </list>
                </model>
            </output>
        </method>
        <method name="security-abac">
            <output if="${security.atz} contains ['abac']">
                <model>
                    <list key="providers-config-entries">
                        <value file="files/application.abac.yaml"/>
                    </list>
                </model>
            </output>
        </method>
    </methods>
    <call method="security-abac"/>
    <call method="security-oidc"/>
    <call method="security-jwt"/>
    <call method="security-google"/>
    <call method="security-signature"/>
    <output>
        <model>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.microprofile</value>
                    <value key="artifactId">helidon-microprofile-security</value>
                </map>
            </list>
            <list key="paths-config-entries">
                <value><![CDATA[    - path: "/simple-greet"
      methods: ["get"]
      authenticate: true]]></value>
            </list>
        </model>
    </output>
</archetype-script>
