<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <methods>
        <method name="metrics">
            <output if="${metrics}">
                <model>
                    <list key="readme-sections">
                        <value><![CDATA[
## Try metrics

```
# Prometheus Format
curl -s -X GET http://localhost:8080/metrics
# TYPE base:gc_g1_young_generation_count gauge
. . .

# JSON Format
curl -H 'Accept: application/json' -X GET http://localhost:8080/metrics
{"base":...
. . .
```

]]>
                        </value>
                    </list>
                    <list key="dependencies">
                        <map order="800">
                            <value key="groupId">org.eclipse.microprofile.metrics</value>
                            <value key="artifactId">microprofile-metrics-api</value>
                        </map>
                        <map order="800">
                            <value key="groupId">io.helidon.microprofile.metrics</value>
                            <value key="artifactId">helidon-microprofile-metrics</value>
                        </map>
                    </list>
                    <list key="SimpleGreetService-imports">
                        <value>org.eclipse.microprofile.metrics.MetricUnits</value>
                        <value>org.eclipse.microprofile.metrics.annotation.Counted</value>
                        <value>org.eclipse.microprofile.metrics.annotation.Timed</value>
                        <value>jakarta.ws.rs.PathParam</value>
                    </list>
                    <list key="SimpleGreetResource-static-fields">
                        <value><![CDATA[
    private static final String PERSONALIZED_GETS_COUNTER_NAME = "personalizedGets";
    private static final String PERSONALIZED_GETS_COUNTER_DESCRIPTION = "Counts personalized GET operations";
    private static final String GETS_TIMER_NAME = "allGets";
    private static final String GETS_TIMER_DESCRIPTION = "Tracks all GET operations";]]>
                        </value>
                    </list>
                    <list key="SimpleGreetService-methods">
                        <value><![CDATA[
    @Path("/{name}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Counted(name = PERSONALIZED_GETS_COUNTER_NAME,
             absolute = true,
             description = PERSONALIZED_GETS_COUNTER_DESCRIPTION)
    @Timed(name = GETS_TIMER_NAME,
           description = GETS_TIMER_DESCRIPTION,
           unit = MetricUnits.SECONDS,
           absolute = true)
    public String getMessage(@PathParam("name") String name) {
        return String.format("Hello %s", name);
    }]]>
                        </value>
                    </list>
                    <list key="MainTest-java-imports">
                        <value>org.eclipse.microprofile.metrics.Counter</value>
                        <value>org.eclipse.microprofile.metrics.MetricRegistry</value>
                    </list>
                    <list key="MainTest-static-imports">
                        <value>static org.junit.jupiter.api.Assertions.assertEquals</value>
                    </list>
                    <list key="MainTest-methods">
                        <value><![CDATA[
    @Test
    void testMicroprofileMetrics() {
        String message = target.path("simple-greet/Joe")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Joe"));
        Counter counter = registry.counter("personalizedGets");
        double before = counter.getCount();

        message = target.path("simple-greet/Eric")
                .request()
                .get(String.class);

        assertThat(message, is("Hello Eric"));
        double after = counter.getCount();
        assertEquals(1d, after - before, "Difference in personalized greeting counter between successive calls");
    }


    @Test
    void testMetrics() {
        Response response = target
                .path("metrics")
                .request()
                .get();
        assertThat(response.getStatus(), is(200));
    }]]>
                        </value>
                    </list>
                    <list key="MainTest-static-fields">
                        <value><![CDATA[
    @Inject
    private MetricRegistry registry;]]>
                        </value>
                    </list>
                    <list key="module-requires">
                        <value>io.helidon.microprofile.metrics</value>
                    </list>
                </model>
            </output>
        </method>
    </methods>
    <call method="metrics"/>
    <output>
        <model if="${tracing}">
            <list key="dependencies">
                <map order="800">
                    <value key="groupId">io.helidon.microprofile.tracing</value>
                    <value key="artifactId">helidon-microprofile-tracing</value>
                </map>
            </list>
            <list key="microprofile-config-entries">
                <value>tracing.service=helidon-service</value>
                <value>tracing.components.web-server.spans.0.name="HTTP Request"</value>
            </list>
            <list if="${tracing.provider} == 'jaeger'" key="microprofile-config-entries">
                <value>tracing.protocol=http</value>
                <value>tracing.host=localhost</value>
                <value>tracing.port=14250</value>
                <value>tracing.path=/api/traces/mine</value>
                <value>tracing.token=token</value>
                <value>tracing.propagation=jaeger</value>
            </list>
            <list if="${tracing.provider} == 'zipkin'" key="microprofile-config-entries">
                <value>tracing.protocol=https</value>
                <value>tracing.host=192.168.1.1</value>
                <value>tracing.port=9987</value>
                <value>tracing.path=/api/v2/spans</value>
                <value>tracing.api-version=1</value>
            </list>
        </model>
    </output>
</archetype-script>
