<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2020, 2022 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.helidon.archetypes</groupId>
        <artifactId>helidon-archetypes-project</artifactId>
        <version>3.0.0-SNAPSHOT</version>
    </parent>
    <packaging>helidon-archetype</packaging>
    <artifactId>helidon</artifactId>
    <name>Helidon Archetype</name>

    <dependencies>
        <dependency>
            <groupId>io.helidon.build-tools.archetype</groupId>
            <artifactId>helidon-archetype-engine-v2</artifactId>
        </dependency>
    </dependencies>

    <properties>
        <!-- support command-line overrides -->
        <cli.build.tools.version>${version.helidon-cli}</cli.build.tools.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>io.helidon.build-tools</groupId>
                <artifactId>helidon-archetype-maven-plugin</artifactId>
                <configuration>
                    <mavenArchetypeCompatible>false</mavenArchetypeCompatible>
                    <entrypoint>
                        <variables>
                            <text path="helidon-version" transient="true">${project.version}</text>
                        </variables>
                        <exec src="flavor.xml"/>
                    </entrypoint>
                    <inputFilters>
                        <!-- TODO test cdata, if not go with a separate file -->
                        <!-- TODO look at multiline expressions -->
                        <!-- TODO look at equality with arrays (== ['foo'] ; == []) -->
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>${media} == 'multipart' || !(${media} contains 'multipart')</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!(${metrics} || ${tracing} || ${health}) || (${metrics} &amp;&amp; ${tracing} &amp;&amp; ${health})</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!${health} || (${health.builtin})</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!${metrics} || (${metrics.builtin})</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!${tracing} || (${tracing} &amp;&amp; ${metrics.provider} == 'microprofile')</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>${extra} == [] || (${extra} contains 'cors' &amp;&amp; ${extra} contains 'webclient' &amp;&amp; ${extra} contains 'fault-tolerance')</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!(${docker} || ${k8s} || ${v8o}) || (${docker} &amp;&amp; ${k8s} &amp;&amp; ${v8o})</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>!${docker} || (${docker.native-image} &amp;&amp; ${docker.jlink-image})</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>${security.atn} == 'oidc' || ${security.atn} == 'jwt' || ${security.atn} == 'google' || ${security.atn} == 'http-signature'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${security.atz} == 'abac' &amp;&amp; ${security.atn} == 'oidc') || ${security.atz} == 'none'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${security} == 'true' &amp;&amp; ${media} == 'none') || ${security} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${metrics} == 'true' &amp;&amp; ${media} == 'none') || ${metrics} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${metrics} == 'true' &amp;&amp; ${security} == 'false') || ${metrics} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${docker} == 'true' &amp;&amp; ${media} == 'none') || ${docker} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${docker} == 'true' &amp;&amp; ${security} == 'false') || ${docker} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${docker} == 'true' &amp;&amp; ${tracing} == 'false') || ${docker} == 'false' || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'custom' &amp;&amp; ${db} == 'false') || ${app-type} != 'custom'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'database' &amp;&amp; ${db.auto-ddl} == 'true') &amp;&amp; ${media.json-lib} == 'jackson' || (${db.auto-ddl} == 'false' &amp;&amp; ${media.json-lib} != 'jackson') || ${app-type} != 'database'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'database' &amp;&amp; ${db.cp} == 'hikaricp') &amp;&amp; ${media.json-lib} == 'jackson' || (${db.cp} != 'hikaricp' &amp;&amp; ${media.json-lib} != 'jackson' ) || ${app-type} != 'database'</filter>
                        <!--suppress UnresolvedMavenProperty -->
                        <filter>(${app-type} == 'database' &amp;&amp; ${health} == 'false') || ${app-type} != 'database'</filter>
                    </inputFilters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.helidon.build-tools</groupId>
                <artifactId>helidon-stager-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>stage</goal>
                        </goals>
                        <configuration>
                            <directories>
                                <directory target="${project.build.directory}">
                                    <archives>
                                        <archive target="cli-data/${project.version}/cli-data.zip">
                                            <copy-artifacts>
                                                <copy-artifact groupId="io.helidon.archetypes"
                                                               artifactId="helidon"
                                                               version="${project.version}"
                                                               type="jar"/>
                                            </copy-artifacts>
                                            <templates>
                                                <template source="src/main/cli/metadata.properties.mustache"
                                                          target="metadata.properties">
                                                    <variables>
                                                        <variable name="buildtoolsVersion"
                                                                  value="${cli.build.tools.version}"/>
                                                        <variable name="cliVersion"
                                                                  value="${cli.build.tools.version}"/>
                                                    </variables>
                                                </template>
                                            </templates>
                                        </archive>
                                    </archives>
                                    <files>
                                        <file target="cli-data/latest">${project.version}</file>
                                    </files>
                                </directory>
                            </directories>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.helidon.build-tools</groupId>
                <artifactId>helidon-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>log</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <messages>
                        <message> |</message>
                        <message> |                      /')    </message>
                        <message> |               $(cyan! /)$(blue /)$(blue! /)$(magenta /)  /' )'   </message>
                        <message> |              $(blue @)   \/'  )'    </message>
                        <message> |  { $(yellow! note) }   $(yellow! &lt;) (  (_...)' </message>
                        <message> |               \      )      </message>
                        <message> |                \,,,,/       </message>
                        <message> |                 $(red _|_)         </message>
                        <message> |</message>
                        <message> |  You can test the archetype locally with the Helidon CLI using the following arguments:</message>
                        <message> |</message>
                        <message> |     --reset --url file://${project.build.directory}/cli-data</message>
                        <message> |</message>
                        <message> |  For example:</message>
                        <message> |</message>
                        <message> |     helidon init --reset --url file://${project.build.directory}/cli-data</message>
                        <message> |</message>
                        <message> |  If you also want to test with a local Helidon CLI build, specify the version when building</message>
                        <message> |  this project, e.g.:</message>
                        <message> |</message>
                        <message> |     mvn clean install -Dcli.build.tools.version=3.0.0-SNAPSHOT</message>
                        <message> |</message>
                    </messages>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
