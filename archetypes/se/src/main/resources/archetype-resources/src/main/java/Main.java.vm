package ${package};

#if( $loggingConfig.matches("y|yes|true") )
import java.io.InputStream;
#end
import java.io.IOException;
#if( $loggingConfig.matches("y|yes|true") )
import java.util.logging.LogManager;
#end

#if( $applicationYaml.matches("y|yes|true") )
import io.helidon.config.Config;
#end
#if( $healthSupport.matches("y|yes|true") )
import io.helidon.health.HealthSupport;
import io.helidon.health.checks.HealthChecks;
#end
#if( $jsonSupport.matches("y|yes|true") )
import io.helidon.media.jsonp.server.JsonSupport;
#end
#if( $metricsSupport.matches("y|yes|true") )
import io.helidon.metrics.MetricsSupport;
#end
import io.helidon.webserver.Routing;
#if( $applicationYaml.matches("y|yes|true") )
import io.helidon.webserver.ServerConfiguration;
#end
import io.helidon.webserver.WebServer;

/**
 * The application main class.
 */
public final class Main {

    /**
     * Cannot be instantiated.
     */
    private Main() { }

    /**
     * Application main entry point.
     * @param args command line arguments.
     * @throws IOException if there are problems reading logging properties
     */
    public static void main(final String[] args) throws IOException {
        startServer();
    }

    /**
     * Start the server.
     * @return the created {@link WebServer} instance
     * @throws IOException if there are problems reading logging properties
     */
    static WebServer startServer() throws IOException {
#if( $loggingConfig.matches("y|yes|true") )
        // load logging configuration
        setupLogging();
#end

#if( $applicationYaml.matches("y|yes|true") )
        // By default this will pick up application.yaml from the classpath
        Config config = Config.create();

        // Get webserver config from the "server" section of application.yaml
        ServerConfiguration serverConfig =
                ServerConfiguration.create(config.get("server"));

        WebServer server = WebServer.create(serverConfig, createRouting(config));
#else
        WebServer server = WebServer.create(createRouting());
#end
        // Try to start the server. If successful, print some info and arrange to
        // print a message at shutdown. If unsuccessful, print the exception.
        server.start()
            .thenAccept(ws -> {
#if( $restService.matches("y|yes|true") )
                System.out.println("WEB server is up! http://localhost:" + ws.port() + "${restServicePath}");
#else
                System.out.println("WEB server is up! http://localhost:" + ws.port());
#end
                ws.whenShutdown().thenRun(()
                    -> System.out.println("WEB server is DOWN. Good bye!"));
                })
            .exceptionally(t -> {
                System.err.println("Startup failed: " + t.getMessage());
                t.printStackTrace(System.err);
                return null;
            });

        // Server threads are not daemon. No need to block. Just react.
        return server;
    }

    /**
     * Creates new {@link Routing}.
     *
     * @return configured routing
     * @param config configuration of this server
     */
#if( $applicationYaml.matches("y|yes|true") )
    private static Routing createRouting(Config config) {
#else
    private static Routing createRouting() {
#end
#if( $metricsSupport.matches("y|yes|true") )
        MetricsSupport metrics = MetricsSupport.create();
#end
#if( $healthSupport.matches("y|yes|true") )
        HealthSupport health = HealthSupport.builder()
                .add(HealthChecks.healthChecks())   // Adds a convenient set of checks
                .build();
#end

        return Routing.builder()
#if( $jsonSupport.matches("y|yes|true") )
                .register(JsonSupport.create())
#end
#if( $healthSupport.matches("y|yes|true") )
                .register(health)                   // Health at "/health"
#end
#if( $metricsSupport.matches("y|yes|true") )
                .register(metrics)                  // Metrics at "/metrics"
#end
#if( $restService.matches("y|yes|true") )
                .register("${restServicePath}", new ${restServiceName}())
#end
                .build();
    }
#if( $loggingConfig.matches("y|yes|true") )

    /**
     * Configure logging from logging.properties file.
     */
    private static void setupLogging() throws IOException {
        try (InputStream is = Main.class.getResourceAsStream("/logging.properties")) {
            LogManager.getLogManager().readConfiguration(is);
        }
    }
#end
}
