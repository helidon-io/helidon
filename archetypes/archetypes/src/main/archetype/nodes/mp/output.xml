<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <variables>
        <boolean path="requires-jakarta-cdi">true</boolean>
        <boolean path="requires-jakarta-inject">true</boolean>
        <boolean path="requires-jakarta-ws-rs">true</boolean>
        <boolean path="requires-io-helidon">true</boolean>
        <boolean path="requires-io-helidon-microprofile-config">true</boolean>
        <boolean path="requires-io-helidon-microprofile-server">true</boolean>
        <boolean path="application-yaml">false</boolean>
        <boolean path="docker.native-image" if="!${docker}">false</boolean>
    </variables>

    <!-- media step -->
    <exec src="features/media/output.xml" if="${app-type} != 'oci'"/>

    <!-- security step -->
    <exec src="features/security/output.xml" if="${security}"/>

    <!-- database step -->
    <exec src="features/database/output.xml" if="${db}"/>

    <!-- extra step -->
    <exec src="features/fault-tolerance/output.xml" if="${extra} contains 'fault-tolerance'"/>
    <exec src="features/cors/output.xml" if="${extra} contains 'cors'"/>

    <!-- observability step -->
    <exec src="features/health/output.xml" if="${health}"/>
    <exec src="features/tracing/output.xml" if="${tracing}"/>
    <exec src="features/metrics/output.xml" if="${metrics}"/>

    <!-- packaging step -->
    <exec src="features/native-image/output.xml" if="${docker.native-image}"/>
    <exec src="features/jpms/output.xml" if="${jpms}"/>

    <exec src="nodes/database/output.xml" if="${app-type} == 'database'"/>
    <exec src="nodes/oci/output.xml" if="${app-type} == 'oci'"/>
    <exec src="nodes/quickstart/output.xml" if="${app-type} == 'quickstart'"/>

    <output if="${app-type} != 'oci'">
        <files transformations="basedir">
            <directory>files</directory>
            <includes>
                <include>src/main/resources/META-INF/beans.xml</include>
            </includes>
        </files>
        <templates engine="mustache" transformations="basedir,hbs,packaged">
            <directory>files</directory>
            <includes>
                <include>src/main/resources/META-INF/microprofile-config.properties.hbs</include>
                <include>src/test/resources/META-INF/microprofile-config.properties.hbs</include>
                <include>src/test/java/**/MainTest.java.hbs</include>
            </includes>
        </templates>

        <template source="files/src/main/resources/application.yaml.hbs"
                  target="${basedir}/src/main/resources/application.yaml"
                  engine="mustache"
                  if="${application-yaml}"/>

        <!-- Idea configuration file to run project from IDE -->
        <template source="files/configuration.xml.hbs"
                  target=".idea/runConfigurations/configuration.xml"
                  engine="mustache"/>

        <model>
            <value key="app-type">${app-type}</value>
            <value key="parent-artifactId">helidon-mp</value>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.microprofile.metrics</value>
                    <value key="artifactId">helidon-microprofile-metrics</value>
                </map>
            </list>
            <value key="parent-artifactId">helidon-mp</value>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.logging</value>
                    <value key="artifactId">helidon-logging-jul</value>
                    <value key="scope">runtime</value>
                </map>
                <map>
                    <value key="groupId">io.smallrye</value>
                    <value key="artifactId">jandex</value>
                    <value key="scope">runtime</value>
                </map>
                <map order="1">
                    <value key="groupId">org.junit.jupiter</value>
                    <value key="artifactId">junit-jupiter-api</value>
                    <value key="scope">test</value>
                </map>
                <map order="2">
                    <value key="groupId">io.helidon.microprofile.testing</value>
                    <value key="artifactId">helidon-microprofile-testing-junit5</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">org.hamcrest</value>
                    <value key="artifactId">hamcrest-all</value>
                    <value key="scope">test</value>
                </map>
            </list>
            <list key="maven-plugins">
                <value file="files/maven-plugins.xml"/>
            </list>
            <list key="MainTest-java-imports">
                <value>jakarta.inject.Inject</value>
                <value>jakarta.ws.rs.client.WebTarget</value>
                <value>jakarta.ws.rs.core.Response</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.microprofile.testing.junit5.HelidonTest</value>
            </list>
            <list key="MainTest-other-imports">
                <value>org.junit.jupiter.api.Test</value>
            </list>
            <list key="MainTest-static-imports">
                <value>static org.hamcrest.MatcherAssert.assertThat</value>
                <value>static org.hamcrest.Matchers.is</value>
            </list>
            <value key="helidon-test" order="0">true</value>
            <list key="microprofile-config">
                <value file="files/src/main/resources/META-INF/greeting.properties"/>
            </list>
            <list key="MainTest-java-imports" if="${media.json-lib} == 'jsonp'">
                <value>jakarta.json.JsonObject</value>
            </list>
            <list key="MainTest-methods" if="${media.json-lib} == 'jsonp'">
                <value><![CDATA[
    @Test
    void testGreet() {
        JsonObject jsonObject = target
                .path("simple-greet")
                .request()
                .get(JsonObject.class);
        assertThat(jsonObject.getString("message"), is("Hello World!"));
    }]]>
                </value>
            </list>
            <list key="MainTest-methods" if="['jsonb', 'jackson'] contains ${media.json-lib}">
                <value order="0"><![CDATA[
    @Test
    void testGreet() {
        Message message = target
                .path("simple-greet")
                .request()
                .get(Message.class);
        assertThat(message.getMessage(), is("Hello World!"));
    }]]>
                </value>
            </list>
            <list key="dependencies">
                <map order="1000">
                    <value key="groupId">io.helidon.microprofile.bundles</value>
                    <value key="artifactId">helidon-microprofile-core</value>
                </map>
            </list>
            <list key="readme-exercise-the-application">
                <value order="999" file="files/README.md"/>
            </list>
            <value key="module-opens-package">true</value>
        </model>
    </output>
</archetype-script>
