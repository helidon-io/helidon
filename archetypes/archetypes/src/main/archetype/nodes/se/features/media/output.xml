<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!--suppress GrazieInspection -->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">
    <methods>
        <method name="jsonp">
            <output if="${media.json-lib} contains 'jsonp'">
                <model>
                    <list key="MainTest-other-imports">
                        <value>jakarta.json.JsonObject</value>
                    </list>
                    <list key="Abstract-tests">
                        <value><![CDATA[
    @Test
    void testGreeting() {
        ClientResponseTyped<JsonObject> response = client.get("/greet").request(JsonObject.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getString("message"), is("Hello World!"));
    }
]]>
                        </value>
                    </list>
                </model>
            </output>
        </method>
        <method name="jackson">
            <output if="${media.json-lib} contains 'jackson'">
                <model>
                    <list key="dependencies">
                        <map order="500">
                            <value key="groupId">com.fasterxml.jackson.core</value>
                            <value key="artifactId">jackson-databind</value>
                        </map>
                        <map order="500">
                            <value key="groupId">io.helidon.http.media</value>
                            <value key="artifactId">helidon-http-media-jackson</value>
                        </map>
                    </list>
                    <list key="module-requires">
                        <value>com.fasterxml.jackson.annotation</value>
                        <value>com.fasterxml.jackson.core</value>
                    </list>
                </model>
            </output>
        </method>
        <method name="jsonb">
            <output if="${media.json-lib} contains 'jsonb'">
                <model>
                    <list key="dependencies">
                        <map order="500">
                            <value key="groupId">io.helidon.http.media</value>
                            <value key="artifactId">helidon-http-media-jsonb</value>
                        </map>
                    </list>
                    <list key="Abstract-tests">
                        <value><![CDATA[
    @Test
    void testGreet() {
        ClientResponseTyped<Message> response = client.get("/greet").request(Message.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getMessage(), is("Hello World!"));
    }

    @Test
    void testGreetJoe() {
        ClientResponseTyped<Message> response = client.get("/greet/Joe").request(Message.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getMessage(), is("Hello Joe!"));
    }
]]>
                        </value>
                    </list>
                    <list key="module-requires">
                        <value>jakarta.json.bind</value>
                    </list>
                </model>
            </output>
        </method>
        <method name="multipart">
            <output if="${media} contains 'multipart'">
                <model>
                    <list key="dependencies">
                        <map order="500">
                            <value key="groupId">io.helidon.http.media</value>
                            <value key="artifactId">helidon-http-media-multipart</value>
                        </map>
                        <map order="500">
                            <value key="groupId">io.helidon.webserver</value>
                            <value key="artifactId">helidon-webserver-static-content</value>
                        </map>
                    </list>
                    <list key="module-requires">
                        <value>io.helidon.http.media.multipart</value>
                        <value>io.helidon.webserver.staticcontent</value>
                    </list>
                    <list key="module-opens">
                        <value>WEB</value>
                    </list>
                    <list key="Main-helidon-imports">
                        <value>io.helidon.http.Status</value>
                        <value>io.helidon.http.HeaderNames</value>
                        <value>io.helidon.http.HeaderValues</value>
                        <value>io.helidon.webserver.staticcontent.StaticContentService</value>
                    </list>
                    <list key="Main-routing-builder">
                        <value order="1"><![CDATA[.any("/", (req, res) -> {
                    res.status(Status.MOVED_PERMANENTLY_301);
                    res.header(HeaderValues.createCached(HeaderNames.LOCATION, "/ui"));
                    res.send();
                })
                .register("/ui", StaticContentService.builder("WEB")
                        .welcomeFileName("index.html")
                        .build())
                .register("/api", new FileService())]]>
                        </value>
                    </list>
                    <list key="Abstract-tests">
                        <value><![CDATA[
    @Test
    void testFileService() {
        try (Http1ClientResponse response = client.get("/api").request()) {
            assertThat(response.status(), is(Status.OK_200));
        }
    }
]]>
                        </value>
                    </list>
                </model>
            </output>
        </method>
    </methods>

    <call method="jsonp"/>
    <call method="jackson"/>
    <call method="jsonb"/>
    <call method="multipart"/>

    <output>
        <templates engine="mustache" transformations="mustache,packaged" if="!(${media} contains 'json')">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/SimpleGreetResource.java.mustache</include>
                <include>src/*/java/**/GreetService.java.mustache</include>
            </includes>
        </templates>
        <templates engine="mustache" transformations="jsonp-mustache,packaged" if="${media.json-lib} == 'jsonp'">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/*.java.jsonp.mustache</include>
            </includes>
        </templates>
        <templates engine="mustache" transformations="json-mustache,packaged" if="['jsonb', 'jackson'] contains ${media.json-lib}">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/*.json.mustache</include>
            </includes>
        </templates>
        <templates engine="mustache" transformations="multipart-mustache,packaged" if="${media} contains 'multipart'">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/*.multipart.mustache</include>
            </includes>
        </templates>
        <file source="files/src/main/resources/WEB/index.html" target="src/main/resources/WEB/index.html" if="${media} contains 'multipart'"/>
        <model>
            <value key="media-json" if="${media} contains 'json'">true</value>
            <value key="media-json" if="!(${media} contains 'json')">false</value>
            <value key="media-json-jackson" if="${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson'">true</value>
            <value key="media-json-jackson" if="!(${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson')">false</value>
            <value key="json-lib" if="${media} contains 'json'">${media.json-lib}</value>
            <value key="multipart" if="${media} contains 'multipart'">true</value>
            <list key="readme-exercise-the-application">
                <value order="900" if="${media} contains 'json'"><![CDATA[
JSON:
```
curl -X GET http://localhost:8080/greet
{"message":"Hello World!"}

curl -X GET http://localhost:8080/greet/Joe
{"message":"Hello Joe!"}

curl -X PUT -H "Content-Type: application/json" -d '{"greeting" : "Hola"}' http://localhost:8080/greet/greeting

curl -X GET http://localhost:8080/greet/Jose
{"message":"Hola Jose!"}
```
]]>
                </value>
            </list>
            <list key="dependencies" if="${media} contains 'multipart' || ${media.json-lib} == 'jsonp'">
                <map order="500">
                    <value key="groupId">jakarta.json</value>
                    <value key="artifactId">jakarta.json-api</value>
                </map>
                <map order="500">
                    <value key="groupId">io.helidon.http.media</value>
                    <value key="artifactId">helidon-http-media-jsonp</value>
                </map>
            </list>
            <list key="module-requires" if="${media} contains 'multipart' || ['jsonp', 'jsonb'] contains ${media.json-lib}">
                <value>jakarta.json</value>
            </list>
        </model>
    </output>
</archetype-script>















