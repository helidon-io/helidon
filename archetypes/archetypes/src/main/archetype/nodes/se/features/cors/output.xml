<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <variables>
        <boolean path="requires-io-helidon-webserver-cors">true</boolean>
        <boolean path="requires-io-helidon-cors">true</boolean>
        <boolean path="requires-java-logging">true</boolean>
    </variables>
    <output>
        <model>
            <value key="cors" if="${extra} contains 'cors'">true</value>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.webserver</value>
                    <value key="artifactId">helidon-webserver-cors</value>
                </map>
                <map>
                    <value key="groupId">io.helidon.cors</value>
                    <value key="artifactId">helidon-cors</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.cors.CrossOriginConfig</value>
                <value>io.helidon.webserver.cors.CorsSupport</value>
            </list>
            <list key="Main-java-imports">
                <value>java.util.logging.Logger</value>
            </list>
            <list key="application-yaml">
                <value file="files/application.yaml"/>
            </list>
            <list key="Main-routing-builder">
                <value><![CDATA[
            .register("/cors-greet", corsSupportForGreeting(), new GreetService())]]>
                </value>
            </list>
            <list key="Main-class-content">
                <value><![CDATA[
    private static CorsSupport corsSupportForGreeting() {
        Config restrictiveConfig = Config.global().get("restrictive-cors");
        if (!restrictiveConfig.exists()) {
            Logger.getLogger(Main.class.getName())
                    .warning("Missing restrictive config; continuing with default CORS support");
        }

        CorsSupport.Builder corsBuilder = CorsSupport.builder();

        Config.global().get("cors")
                .ifExists(c -> {
                    Logger.getLogger(Main.class.getName()).info("Using the override configuration");
                    corsBuilder.mappedConfig(c);
                });
        corsBuilder
                .config(restrictiveConfig) // restricted sharing for PUT, DELETE
                .addCrossOrigin(CrossOriginConfig.create()) // open sharing for other methods
                .build();

        return corsBuilder.build();
    }]]>
                </value>
            </list>
            <list key="MainTest-java-imports">
                <value>java.util.Optional</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.http.Headers</value>
                <value>io.helidon.cors.CrossOriginConfig</value>
            </list>
            <list key="MainTest-static-imports">
                <value>io.helidon.http.HeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN</value>
                <value>io.helidon.http.HeaderNames.HOST</value>
                <value>io.helidon.http.HeaderNames.ORIGIN</value>
                <value>org.hamcrest.CoreMatchers.containsString</value>
            </list>
            <list key="MainTest-tests">
                <value><![CDATA[
    @Test
    void testAnonymousGreetWithCors() {
        try (Http1ClientResponse response = client.get()
                .path("/cors-greet")
                .headers(it -> it
                        .set(ORIGIN, "http://foo.com")
                        .set(HOST, "here.com"))
                .request()) {

            assertThat(response.status().code(), is(200));
            String payload = response.entity().as(String.class);
            assertThat(payload, containsString("Hello World"));
            Headers responseHeaders = response.headers();
            Optional<String> allowOrigin = responseHeaders.value(ACCESS_CONTROL_ALLOW_ORIGIN);
            assertThat("Expected CORS header " + CrossOriginConfig.ACCESS_CONTROL_ALLOW_ORIGIN + " is absent",
                    allowOrigin.isPresent(), is(true));
            assertThat(allowOrigin.get(), is("*"));
        }
    }]]>
                </value>
            </list>
            <list key="readme-sections">
                <value file="files/README.md"/>
            </list>
        </model>
    </output>
</archetype-script>
