<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2023, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <variables>
        <boolean path="requires-io-helidon-faulttolerance">true</boolean>
    </variables>
    <output>
<<<<<<<< HEAD:archetypes/archetypes/src/main/archetype/nodes/se/features/security/nodes/jwt/extra-output.xml
        <templates engine="mustache" transformations="mustache,packaged" if="${extra} contains 'webclient'">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/WebClientMain.java.mustache</include>
            </includes>
        </templates>
        <templates engine="mustache" transformations="mustache,packaged" if="${extra} contains 'fault-tolerance'">
            <directory>files</directory>
            <includes>
                <include>src/*/java/**/FtService.java.mustache</include>
========
        <templates engine="mustache" transformations="basedir,hbs,packaged">
            <directory>files</directory>
            <includes>
                <include>src/main/java/**/FtService.java.hbs</include>
>>>>>>>> b2f08018d0 (Create new archetype layout):archetypes/archetypes/src/main/archetype/nodes/se/features/fault-tolerance/output.xml
            </includes>
        </templates>
        <model>
            <value key="fault-tolerance">true</value>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.helidon.fault-tolerance</value>
                    <value key="artifactId">helidon-fault-tolerance</value>
                </map>
            </list>
            <list key="Main-helidon-imports">
                <value>io.helidon.http.Status</value>
                <value>io.helidon.faulttolerance.BulkheadException</value>
                <value>io.helidon.faulttolerance.CircuitBreakerOpenException</value>
                <value>io.helidon.faulttolerance.TimeoutException</value>
            </list>
<<<<<<<< HEAD:archetypes/archetypes/src/main/archetype/nodes/se/features/security/nodes/jwt/extra-output.xml
            <list key="Main-routing-builder" if="${extra} contains 'fault-tolerance'">
                <value><![CDATA[.register("/", new FtService())
                .error(BulkheadException.class,
                        (req, res, ex) -> res.status(Status.SERVICE_UNAVAILABLE_503).send("bulkhead"))
                .error(CircuitBreakerOpenException.class,
                        (req, res, ex) -> res.status(Status.SERVICE_UNAVAILABLE_503).send("circuit breaker"))
                .error(TimeoutException.class,
                        (req, res, ex) -> res.status(Status.REQUEST_TIMEOUT_408).send("timeout"))
                .error(Throwable.class,
                        (req, res, ex) -> res.status(Status.INTERNAL_SERVER_ERROR_500)
                                .send(ex.getClass().getName() + ": " + ex.getMessage()))]]>
========
            <list key="Main-routing-builder">
                <value><![CDATA[
            .register("/", new FtService())
            .error(BulkheadException.class,
                (req, res, ex) -> res.status(Status.SERVICE_UNAVAILABLE_503).send("bulkhead"))
            .error(CircuitBreakerOpenException.class,
                (req, res, ex) -> res.status(Status.SERVICE_UNAVAILABLE_503).send("circuit breaker"))
            .error(TimeoutException.class,
                (req, res, ex) -> res.status(Status.REQUEST_TIMEOUT_408).send("timeout"))
            .error(Throwable.class,
                (req, res, ex) -> res.status(Status.INTERNAL_SERVER_ERROR_500)
                    .send(ex.getClass().getName() + ": " + ex.getMessage()))]]>
>>>>>>>> b2f08018d0 (Create new archetype layout):archetypes/archetypes/src/main/archetype/nodes/se/features/fault-tolerance/output.xml
                </value>
            </list>
            <list key="MainTest-tests">
                <value><![CDATA[
    @Test
    void testAsync() {
        String response = client.get()
                .path("/async")
                .request()
                .as(String.class);

        assertThat(response, is("blocked for 100 millis"));
    }

    @Test
    void testBulkhead() throws InterruptedException {
        // bulkhead is configured for limit of 1 and queue of 1, so third
        // request should fail
        client.get()
                .path("/bulkhead/10000")
                .request();

        client.get()
                .path("/bulkhead/10000")
                .request();

        // I want to make sure the above is connected
        Thread.sleep(300);

        try (Http1ClientResponse third = client.get().path("/bulkhead/10000").request()) {
            // registered an error handler in Main
            assertThat(third.status(), is(Status.OK_200));
            assertThat(third.as(String.class), is("Call rejected: 1"));
        }
    }

    @Test
    void testCircuitBreaker() {
        String response = client.get()
                .path("/circuitBreaker/true")
                .request()
                .as(String.class);

        assertThat(response, is("blocked for 100 millis"));

        // error ratio is 20% within 10 request
        client.get()
                .path("/circuitBreaker/false")
                .request()
                .close();

        // should work after first
        response = client.get()
                .path("/circuitBreaker/true")
                .request()
                .as(String.class);

        assertThat(response, is("blocked for 100 millis"));

        // should open after second
        client.get()
                .path("/circuitBreaker/false")
                .request()
                .close();

        Http1ClientResponse clientResponse = client.get()
                .path("/circuitBreaker/true")
                .request();

        // registered an error handler in Main
        assertThat(clientResponse.status(), is(Status.SERVICE_UNAVAILABLE_503));
        assertThat(clientResponse.as(String.class), is("circuit breaker"));
    }

    @Test
    void testFallback() {
        String response = client.get()
                .path("/fallback/true")
                .request()
                .as(String.class);

        assertThat(response, is("blocked for 100 millis"));

        response = client.get()
                .path("/fallback/false")
                .request()
                .as(String.class);

        assertThat(response, is("Failed back because of reactive failure"));
    }

    @Test
    void testRetry() {
        String response = client.get()
                .path("/retry/1")
                .request()
                .as(String.class);

        assertThat(response, is("calls/failures: 1/0"));

        response = client.get()
                .path("/retry/2")
                .request()
                .as(String.class);

        assertThat(response, is("calls/failures: 2/1"));

        response = client.get()
                .path("/retry/3")
                .request()
                .as(String.class);

        assertThat(response, is("calls/failures: 3/2"));

        try (Http1ClientResponse clientResponse = client.get()
                .path("/retry/4")
                .request()) {

            // no error handler specified
            assertThat(clientResponse.status(), is(Status.INTERNAL_SERVER_ERROR_500));
            assertThat(clientResponse.as(String.class), is("java.lang.RuntimeException: reactive failure"));
        }
    }

    @Test
    void testTimeout() {
        String response = client.get()
                .path("/timeout/10")
                .request()
                .as(String.class);

        assertThat(response, is("Slept for 10 ms"));

        try (Http1ClientResponse clientResponse = client.get()
                .path("/timeout/1000")
                .request()) {
            // error handler specified in Main
            assertThat(clientResponse.status(), is(Status.REQUEST_TIMEOUT_408));
            assertThat(clientResponse.as(String.class), is("timeout"));
        }
<<<<<<<< HEAD:archetypes/archetypes/src/main/archetype/nodes/se/features/security/nodes/jwt/extra-output.xml
    }
]]>
                </value>
            </list>
            <list key="module-requires" if="${extra} contains 'fault-tolerance'">
                <value>io.helidon.faulttolerance</value>
========
    }]]>
                </value>
>>>>>>>> b2f08018d0 (Create new archetype layout):archetypes/archetypes/src/main/archetype/nodes/se/features/fault-tolerance/output.xml
            </list>
        </model>
    </output>
</archetype-script>
