<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2022, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <step name="Media Support" optional="true">
        <variables>
            <text path="media.default-json-lib" if="${flavor} == 'mp'">jsonb</text>
            <text path="media.default-json-lib" if="${flavor} == 'se'">jsonp</text>
        </variables>
        <inputs>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/699 -->
            <list id="media" name="Select Media Support" default="json" optional="true">
                <option value="json" name="JSON" description="Handle 'application/json' payloads">
                    <inputs>
                        <enum id="json-lib" name="Select a JSON library" default="${default-json-lib}" optional="true">
                            <option value="jsonp" name="JSON-P" description="Jakarta JSON Processing" if="${flavor} == 'se'">
                                <output>
                                    <model>
                                        <list key="MainTest-other-imports">
                                            <value>jakarta.json.JsonObject</value>
                                        </list>
                                        <list key="Abstract-tests">
                                            <value><![CDATA[
    @Test
    void testGreeting() {
        ClientResponseTyped<JsonObject> response = client.get("/greet").request(JsonObject.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getString("message"), is("Hello World!"));
    }
]]></value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                            <option value="jackson" name="Jackson" description="Popular JSON library">
                                <output>
                                    <model>
                                        <list key="dependencies">
                                            <map order="500">
                                                <value key="groupId">com.fasterxml.jackson.core</value>
                                                <value key="artifactId">jackson-databind</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'se'">
                                                <value key="groupId">io.helidon.http.media</value>
                                                <value key="artifactId">helidon-http-media-jackson</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'mp'">
                                                <value key="groupId">org.glassfish.jersey.media</value>
                                                <value key="artifactId">jersey-media-json-jackson</value>
                                                <value key="scope">runtime</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'mp'">
                                                <value key="groupId">jakarta.xml.bind</value>
                                                <value key="artifactId">jakarta.xml.bind-api</value>
                                            </map>
                                        </list>
                                        <list key="initialize-at-build-time" if="${flavor} == 'mp'">
                                            <value>com.fasterxml.jackson.core</value>
                                        </list>
                                        <list key="module-requires">
                                            <value>com.fasterxml.jackson.annotation</value>
                                            <value>com.fasterxml.jackson.core</value>
                                            <value if="${flavor} == 'mp'">jakarta.xml.bind</value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                            <option value="jsonb" name="JSON-B" description="Jakarta JSON Binding">
                                <output>
                                    <model>
                                        <list key="dependencies">
                                            <map order="500" if="${flavor} != 'se'">
                                                <value key="groupId">jakarta.json.bind</value>
                                                <value key="artifactId">jakarta.json.bind-api</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'mp'">
                                                <value key="groupId">org.glassfish.jersey.media</value>
                                                <value key="artifactId">jersey-media-json-binding</value>
                                                <value key="scope">runtime</value>
                                            </map>
                                            <map order="500" if="${flavor} == 'se'">
                                                <value key="groupId">io.helidon.http.media</value>
                                                <value key="artifactId">helidon-http-media-jsonb</value>
                                            </map>
                                        </list>
                                        <list key="Abstract-tests" if="${flavor} == 'se'">
                                            <value><![CDATA[
    @Test
    void testGreet() {
        ClientResponseTyped<Message> response = client.get("/greet").request(Message.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getMessage(), is("Hello World!"));
    }

    @Test
    void testGreetJoe() {
        ClientResponseTyped<Message> response = client.get("/greet/Joe").request(Message.class);
        assertThat(response.status(), is(Status.OK_200));
        assertThat(response.entity().getMessage(), is("Hello Joe!"));
    }
]]></value>
                                        </list>
                                        <list key="module-requires">
                                            <value>jakarta.json.bind</value>
                                        </list>
                                    </model>
                                </output>
                            </option>
                        </enum>
                    </inputs>
                </option>
                <option value="multipart" name="MultiPart" description="Handle 'multipart/form-data' payloads">
                    <output>
                        <model>
                            <list key="dependencies">
                                <map order="500" if="${flavor} == 'mp'">
                                    <value key="groupId">org.glassfish.jersey.media</value>
                                    <value key="artifactId">jersey-media-multipart</value>
                                </map>
                                <map order="500" if="${flavor} == 'se'">
                                    <value key="groupId">io.helidon.http.media</value>
                                    <value key="artifactId">helidon-http-media-multipart</value>
                                </map>
                                <map order="500" if="${flavor} == 'se'">
                                    <value key="groupId">io.helidon.webserver</value>
                                    <value key="artifactId">helidon-webserver-static-content</value>
                                </map>
                            </list>
                            <list key="module-requires" if="${flavor} == 'se'">
                                <value>io.helidon.http.media.multipart</value>
                                <value>io.helidon.webserver.staticcontent</value>
                            </list>
                            <list key="module-requires" if="${flavor} == 'mp'">
                                <value>jersey.media.multipart</value>
                            </list>
                            <list key="module-opens" if="${flavor} == 'se'">
                                <value>WEB</value>
                            </list>
                            <list key="Main-helidon-imports" if="${flavor} == 'se'">
                                <value>io.helidon.http.Status</value>
                                <value>io.helidon.http.HeaderNames</value>
                                <value>io.helidon.http.HeaderValues</value>
                                <value>io.helidon.webserver.staticcontent.StaticContentService</value>
                            </list>
                            <list key="Main-routing-builder" if="${flavor} == 'se'">
                                <value order="1"><![CDATA[.any("/", (req, res) -> {
                    res.status(Status.MOVED_PERMANENTLY_301);
                    res.header(HeaderValues.createCached(HeaderNames.LOCATION, "/ui"));
                    res.send();
                })
                .register("/ui", StaticContentService.builder("WEB")
                        .welcomeFileName("index.html")
                        .build())
                .register("/api", new FileService())]]></value>
                            </list>
                            <list key="Abstract-tests">
                            <value><![CDATA[
    @Test
    void testFileService() {
        try (Http1ClientResponse response = client.get("/api").request()) {
            assertThat(response.status(), is(Status.OK_200));
        }
    }
]]></value>
                            </list>
                            <list key="module-requires">
                                <value if="${flavor} == 'mp'">org.jvnet.mimepull</value>
                            </list>
                        </model>
                    </output>
                </option>
            </list>
        </inputs>
        <variables>
            <text path="media.json-lib" if="!(${media} contains 'json')"/>
        </variables>
        <output>
            <!-- TODO https://github.com/oracle/helidon-build-tools/issues/609 -->
            <model>
                <value key="media-json" if="${media} contains 'json'">true</value>
                <value key="media-json" if="!(${media} contains 'json')">false</value>
                <value key="media-json-jackson" if="${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson'">true</value>
                <value key="media-json-jackson" if="!(${media} contains 'json' &amp;&amp; ${media.json-lib} == 'jackson')">false</value>
                <value key="json-lib" if="${media} contains 'json'">${media.json-lib}</value>
                <value key="multipart" if="${media} contains 'multipart'">true</value>
                <list key="readme-exercise-the-application">
                    <value order="900" if="${media} contains 'json'"><![CDATA[
JSON:
```
curl -X GET http://localhost:8080/greet
{"message":"Hello World!"}

curl -X GET http://localhost:8080/greet/Joe
{"message":"Hello Joe!"}

curl -X PUT -H "Content-Type: application/json" -d '{"greeting" : "Hola"}' http://localhost:8080/greet/greeting

curl -X GET http://localhost:8080/greet/Jose
{"message":"Hola Jose!"}
```
]]></value>
                </list>
                <list key="dependencies" if="${media} contains 'multipart' || ${media.json-lib} == 'jsonp'">
                    <map order="500" if="${flavor} == 'se'">
                        <value key="groupId">jakarta.json</value>
                        <value key="artifactId">jakarta.json-api</value>
                    </map>
                    <map order="500" if="${flavor} == 'se'">
                        <value key="groupId">io.helidon.http.media</value>
                        <value key="artifactId">helidon-http-media-jsonp</value>
                    </map>
                </list>
                <list key="module-requires" if="${media} contains 'multipart' || ['jsonp', 'jsonb'] contains ${media.json-lib}">
                    <value>jakarta.json</value>
                </list>
            </model>
        </output>
    </step>
</archetype-script>
