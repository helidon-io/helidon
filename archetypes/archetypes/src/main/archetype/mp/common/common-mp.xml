<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021, 2024 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!--suppress GrazieInspection -->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-2.0.xsd">

    <exec src="/common/common.xml"/>
    <source src="/common/sources.xml"/>
    <output>
        <templates engine="mustache" transformations="mustache">
            <directory>files</directory>
            <includes>
                <include>.idea/runConfigurations/configuration.xml.mustache</include>
            </includes>
        </templates>
        <model>
            <value key="parent-artifactId">helidon-mp</value>
            <list key="dependencies">
                <map>
                    <value key="groupId">io.smallrye</value>
                    <value key="artifactId">jandex</value>
                    <value key="scope">runtime</value>
                </map>
                <map>
                    <value key="groupId">jakarta.activation</value>
                    <value key="artifactId">jakarta.activation-api</value>
                </map>
                <map order="0">
                    <value key="groupId">org.junit.jupiter</value>
                    <value key="artifactId">junit-jupiter-api</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">io.helidon.microprofile.testing</value>
                    <value key="artifactId">helidon-microprofile-testing-junit5</value>
                    <value key="scope">test</value>
                </map>
                <map order="0">
                    <value key="groupId">org.hamcrest</value>
                    <value key="artifactId">hamcrest-all</value>
                    <value key="scope">test</value>
                </map>
            </list>
            <list key="maven-plugins">
                <value><![CDATA[            <plugin>
                <groupId>io.smallrye</groupId>
                <artifactId>jandex-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-index</id>
                    </execution>
                </executions>
            </plugin>]]></value>
            </list>
            <list key="MainTest-java-imports">
                <value>jakarta.inject.Inject</value>
                <value>jakarta.ws.rs.client.WebTarget</value>
                <value>jakarta.ws.rs.core.Response</value>
            </list>
            <list key="MainTest-helidon-imports">
                <value>io.helidon.microprofile.testing.junit5.HelidonTest</value>
            </list>
            <list key="MainTest-other-imports">
                <value>org.junit.jupiter.api.Test</value>
            </list>
            <list key="MainTest-static-imports">
                <value>static org.hamcrest.MatcherAssert.assertThat</value>
                <value>static org.hamcrest.Matchers.is</value>
            </list>
            <value key="main-class-javadoc"><![CDATA[
/**
 * Main entry point of the application.
 * <p>
 * Note that this class is required when using modules as the module main class must be in a package that is either exported
 * or opened by the module, see {@link java.lang.module.ModuleDescriptor#read(java.io.InputStream, java.util.function.Supplier)}.
 * <p>
 * This class provides a proper module main class and calls the {@link io.helidon.Main#main(String[]) built-in main class}.
 */]]></value>
            <value key="main-method-javadoc"><![CDATA[
    /**
     * Main method. Starts CDI (and the application).
     *
     * @param args ignored
     */]]></value>
            <list key="main-class-fields">
                <value><![CDATA[
    /**
    * Cannot be instantiated.
    */
    private Main() {
    }
]]></value>
            </list>
            <list key="main-method-content">
                <value><![CDATA[        io.helidon.Main.main(args);]]></value>
            </list>
        </model>
    </output>
</archetype-script>
