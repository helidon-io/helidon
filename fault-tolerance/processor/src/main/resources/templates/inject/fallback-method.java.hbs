{{!
Copyright (c) 2023 Oracle and/or its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
package {{packageName}};

import java.util.List;
import java.util.Set;

import io.helidon.common.GenericType;
import io.helidon.faulttolerance.ErrorChecker;
import io.helidon.faulttolerance.FallbackMethod;

import jakarta.inject.Named;
import jakarta.inject.Singleton;

@Singleton
@Named("{{enclosingClassTypeName.name}}.{{fallback.methodName}}")
{{{generatedSticker}}}
class {{className}} implements FallbackMethod<{{fallback.returnType}}, {{fallback.beanType}}> {
    private static final Set<Class<? extends Throwable>> APPLY_ON = Set.of(
      {{#each fallback.applyOn}}{{this}}.class{{#unless @last}},
      {{/unless}}{{/each}}
    );
    private static final Set<Class<? extends Throwable>> SKIP_ON = Set.of(
      {{#each fallback.skipOn}}{{this}}.class{{#unless @last}},
      {{/unless}}{{/each}}
    );
    private static final ErrorChecker ERROR_CHECKER = ErrorChecker.create(SKIP_ON, APPLY_ON);
    private static final List<GenericType<?>> PARAM_TYPES = List.of(
      {{#each fallback.paramTypes}}new GenericType<{{this}}>() {}{{#unless @last}},
      {{/unless}}{{/each}}
    );


    @Override
    public {{fallback.returnType}} fallback({{fallback.beanType}} service, Throwable throwable, Object... params) throws Throwable {
      if (ERROR_CHECKER.shouldSkip(throwable)) {
        throw throwable;
      } else {
        {{#unless fallback.returnVoid}}return {{/unless}}_fallback(service, throwable, params); {{#if fallback.returnVoid}}
          return null;
        {{/if}}
      }
    }

    @Override
    public List<GenericType<?>> parameterTypes() {
      return PARAM_TYPES;
    }

    private {{fallback.returnType}} _fallback({{fallback.beanType}} service, Throwable throwable, Object... params) {
      {{#unless fallback.returnVoid}}return {{/unless}}{{#if fallback.fallbackStatic}}{{fallback.beanType}}{{else}}service{{/if}}.{{fallback.fallbackName}}(
        {{#each fallback.paramTypes}}({{this}}) params[{{@index}}]{{#unless @last}},
        {{/unless}}{{/each}}{{#if fallback.fallbackAcceptsThrowable}},
        throwable{{/if}}
      );
      {{#if fallback.returnVoid}}return null;{{/if}}
    }
}
