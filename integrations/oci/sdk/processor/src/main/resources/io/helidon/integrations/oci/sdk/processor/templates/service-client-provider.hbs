{{!
Copyright (c) 2023 Oracle and/or its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}{{#header}}{{.}}
{{/header}}
package {{packagename}};

import com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider;

import {{classname}}Client;
import {{classname}}Client{{dot}}Builder;

import io.helidon.common.Weight;
import io.helidon.inject.api.ContextualServiceQuery;
import io.helidon.inject.api.ExternalContracts;
import io.helidon.inject.api.InjectionPointProvider;
import io.helidon.inject.api.ServiceInfoBasics;

import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.inject.Provider;
import jakarta.inject.Singleton;
import java.util.Optional;

{{{generatedanno}}}
@Singleton
@Weight(ServiceInfoBasics.DEFAULT_INJECT_WEIGHT)
@ExternalContracts({{classname}}.class)
class {{simpleclassname}}$$Oci$$Client implements InjectionPointProvider<{{simpleclassname}}Client> {
    private final InjectionPointProvider<AbstractAuthenticationDetailsProvider> authProvider;
    private final InjectionPointProvider<{{simpleclassname}}Client{{dot}}Builder> builderProvider;

    @Deprecated
    @Inject
    {{simpleclassname}}$$Oci$$Client(Provider<AbstractAuthenticationDetailsProvider> authProvider, Provider<{{simpleclassname}}Client{{dot}}Builder> builderProvider) {
        this.authProvider = (InjectionPointProvider<AbstractAuthenticationDetailsProvider>) authProvider;
        this.builderProvider = (InjectionPointProvider<{{simpleclassname}}Client{{dot}}Builder>) builderProvider;
    }

    @Override
    public Optional<{{simpleclassname}}Client> first(ContextualServiceQuery query) {
        return Optional.of(builderProvider.first(query).orElseThrow().build(authProvider.first(query).orElseThrow()));
    }

}
