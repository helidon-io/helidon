package io.helidon.integrations.generated.com.oracle.bmc.objectstorage;

import com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider;

import com.oracle.bmc.objectstorage.ObjectStorageClient;
import com.oracle.bmc.objectstorage.ObjectStorageClient.Builder;
import com.oracle.bmc.Region;

import io.helidon.common.Weight;
import io.helidon.pico.api.ContextualServiceQuery;
import io.helidon.pico.api.InjectionPointProvider;
import io.helidon.pico.api.ServiceInfoBasics;

import jakarta.annotation.Generated;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.inject.Provider;
import jakarta.inject.Singleton;
import java.util.Optional;

@Generated(value = "io.helidon.pico.processor.spi.PicoAnnotationProcessorObserver", comments = "version=1")
@Singleton
@Weight(ServiceInfoBasics.DEFAULT_PICO_WEIGHT)
class ObjectStorage$$Oci$$ClientBuilder implements InjectionPointProvider<ObjectStorageClient.Builder> {
    private final InjectionPointProvider<Region> regionProvider;

    @Deprecated
    @Inject
    ObjectStorage$$Oci$$ClientBuilder(Provider<Region> regionProvider) {
        this.regionProvider = (InjectionPointProvider<Region>) regionProvider;
    }

    @Override
    public Optional<ObjectStorageClient.Builder> first(ContextualServiceQuery query) {
        ObjectStorageClient.Builder builder = ObjectStorageClient.builder();
        regionProvider.first(query).ifPresent(it -> builder.region(it));
        return Optional.of(builder);
    }

}
