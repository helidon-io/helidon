/*
 * Copyright (c) {{YEAR}} Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.helidon.integrations.generated.com.oracle.bmc.objectstorage;

import java.util.Optional;

import io.helidon.common.Generated;
import io.helidon.common.Weight;
import io.helidon.inject.ContextualServiceQuery;
import io.helidon.inject.InjectionPointProvider;
import io.helidon.inject.service.Injection;

import com.oracle.bmc.Region;
import com.oracle.bmc.objectstorage.ObjectStorageClient;

@Generated(value = "io.helidon.integrations.oci.sdk.codegen.OciInjectionCodegenObserver", trigger = "com.oracle.bmc.objectstorage.ObjectStorage")
@Injection.Singleton
@Weight(99.0)
class ObjectStorage__Oci_ClientBuilder implements InjectionPointProvider<ObjectStorageClient.Builder> {

    private final InjectionPointProvider<Region> regionProvider;

    @Injection.Inject
    @Deprecated
    ObjectStorage__Oci_ClientBuilder(InjectionPointProvider<Region> regionProvider) {
        this.regionProvider = regionProvider;
    }

    @Override
    public Optional<ObjectStorageClient.Builder> first(ContextualServiceQuery query) {
        var builder = ObjectStorageClient.builder();
        regionProvider.first(query).ifPresent(builder::region);
        return Optional.of(builder);
    }

}
