/*
 * Copyright (c) {{YEAR}} Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.helidon.integrations.generated.com.oracle.bmc.objectstorage;

import java.util.Optional;

import io.helidon.common.Generated;
import io.helidon.common.Weight;
import io.helidon.service.registry.Lookup;
import io.helidon.service.registry.Service;

import com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider;
import com.oracle.bmc.objectstorage.ObjectStorage;
import com.oracle.bmc.objectstorage.ObjectStorageClient;

@Generated(value = "io.helidon.integrations.oci.sdk.codegen.OciInjectionCodegenObserver", trigger = "com.oracle.bmc.objectstorage.ObjectStorage")
@Service.Singleton
@Weight(99.0D)
@Service.ExternalContracts(ObjectStorage.class)
class ObjectStorage__Oci_Client implements Service.InjectionPointFactory<ObjectStorageClient> {

    private final Service.InjectionPointFactory<AbstractAuthenticationDetailsProvider> authProvider;
    private final Service.InjectionPointFactory<ObjectStorageClient.Builder> builderProvider;

    @Service.Inject
    @Deprecated
    ObjectStorage__Oci_Client(Service.InjectionPointFactory<AbstractAuthenticationDetailsProvider> authProvider, Service.InjectionPointFactory<ObjectStorageClient.Builder> builderProvider) {
        this.authProvider = authProvider;
        this.builderProvider = builderProvider;
    }

    @Override
    public Optional<Service.QualifiedInstance<ObjectStorageClient>> first(Lookup query) {
        return Optional.of(Service.QualifiedInstance.create(builderProvider.first(query).orElseThrow().get().build(authProvider.first(query).orElseThrow().get())));
    }

}
