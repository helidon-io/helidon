#
# Copyright (c) 2019, 2020 Oracle and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Graal native image supports additional configuration from this property file.
# We add required properties for Netty
#
# allow incomplete classpath  - Netty contains classes that depend on Log4j etc, so we need to allow that
#
Args=--allow-incomplete-classpath \
  --initialize-at-run-time=io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf \
  --initialize-at-run-time=io.netty.buffer.UnreleasableByteBuf \
  --initialize-at-run-time=io.netty.handler.codec.http2.Http2ConnectionHandler \
  --initialize-at-run-time=io.netty.handler.codec.http2.Http2CodecUtil \
  --initialize-at-run-time=io.netty.handler.codec.http.HttpObjectEncoder \
  --initialize-at-run-time=io.netty.handler.codec.http2.CleartextHttp2ServerUpgradeHandler \
  --initialize-at-run-time=io.netty.handler.codec.http2.DefaultHttp2FrameWriter \
  --initialize-at-run-time=io.netty.handler.codec.http2.Http2ServerUpgradeCodec \
  --initialize-at-run-time=io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator \
  --initialize-at-run-time=io.netty.handler.ssl.JettyNpnSslEngine \
  --initialize-at-run-time=io.netty.handler.ssl.ReferenceCountedOpenSslEngine \
  --initialize-at-run-time=io.netty.handler.ssl.ConscryptAlpnSslEngine \
  --initialize-at-run-time=io.netty.handler.ssl.JettyAlpnSslEngine$ClientEngine \
  --initialize-at-run-time=io.netty.handler.ssl.JettyAlpnSslEngine$ServerEngine \
  --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger
