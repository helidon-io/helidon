{{!--
/*
 Copyright (c) 2023 Oracle and/or its affiliates.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--}}
package {{packageName}};

import io.helidon.common.Weight;
import io.helidon.common.http.Http;

{{#if http.hasQueryParams}}import io.helidon.common.http.HttpException;

import io.helidon.common.uri.UriQuery;
{{/if}}
import io.helidon.nima.webserver.http.GeneratedHandler;
import io.helidon.nima.webserver.http.Handler;
import io.helidon.nima.webserver.http.ServerRequest;
import io.helidon.nima.webserver.http.ServerResponse;

import io.helidon.pico.ExternalContracts;

import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.inject.Provider;
import jakarta.inject.Singleton;

@jakarta.annotation.Generated({{{generatedSticker}}})
@Singleton
@Named("{{enclosingClassTypeName.name}}")
@Weight({{weight}})
@ExternalContracts(GeneratedHandler.class)
public class {{className}} implements GeneratedHandler {
{{#each http.headers}}private static final Http.HeaderName {{this.field}} = Http.Header.create("{{this.name}}");
{{/each}}
    private static final Http.Method METHOD = Http.Method.create("{{http.method}}");

    private final Provider<{{enclosingClassTypeName.className}}> target;

    private {{enclosingClassTypeName.className}} endpoint;

    @Inject
    {{className}}(Provider<{{enclosingClassTypeName.className}}> target) {
        this.target = target;
    }

    @Override
    public Http.Method method() {
        return METHOD;
    }

    @Override
    public String path() {
        return "{{http.path}}";
    }

    @Override
    public void beforeStart() {
        this.endpoint = target.get();
    }

    @Override
    public void afterStop() {
        this.endpoint = null;
    }

    @Override
    public void handle(ServerRequest req, ServerResponse res) {
        {{#unless http.response.isVoid}}{{http.response.type}} response = {{/unless}}invokeMethod(req, res);
        {{#if http.response.isVoid}}if (!res.isSent()) {
          res.send();
        }{{else}}res.send(response);{{/if}}
    }

    private {{#if http.response.isVoid}}void{{else}}{{http.response.type}}{{/if}} invokeMethod(ServerRequest req, ServerResponse res) {
        {{#unless http.response.isVoid}}return {{/unless}}endpoint.{{http.methodName}}(
          {{#each http.params}}{{{this}}}
          {{/each}}
        );
    }
{{#if http.hasQueryParams}}
    private <T> T query(ServerRequest req, ServerResponse res, String name, String defaultValue, Class<T> type) {
        UriQuery query = req.query();
        if (query.contains(name)) {
            // todo hardcoded type
            return (T) query.value(name);
        }
        if (defaultValue == null) {
            throw new HttpException("Query parameter \"" + name + "\" is required", Http.Status.BAD_REQUEST_400, true);
        }
        // todo also hardcoded type
        return (T) defaultValue;
    }
{{/if}}
}
