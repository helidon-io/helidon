/*
 * Copyright (c) 2022 Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.helidon.nima.http.encoding.brotli;

class Tables {

    public static final int[] kBrotliShellGaps = {132, 57, 23, 10, 4, 1};

    public static final double[] kBrotliLog2Table = {
            0.0000000000000000f, 0.0000000000000000f, 1.0000000000000000f,
            1.5849625007211563f, 2.0000000000000000f, 2.3219280948873622f,
            2.5849625007211561f, 2.8073549220576042f, 3.0000000000000000f,
            3.1699250014423126f, 3.3219280948873626f, 3.4594316186372978f,
            3.5849625007211565f, 3.7004397181410922f, 3.8073549220576037f,
            3.9068905956085187f, 4.0000000000000000f, 4.0874628412503400f,
            4.1699250014423122f, 4.2479275134435852f, 4.3219280948873626f,
            4.3923174227787607f, 4.4594316186372973f, 4.5235619560570131f,
            4.5849625007211570f, 4.6438561897747244f, 4.7004397181410926f,
            4.7548875021634691f, 4.8073549220576037f, 4.8579809951275728f,
            4.9068905956085187f, 4.9541963103868758f, 5.0000000000000000f,
            5.0443941193584534f, 5.0874628412503400f, 5.1292830169449664f,
            5.1699250014423122f, 5.2094533656289501f, 5.2479275134435852f,
            5.2854022188622487f, 5.3219280948873626f, 5.3575520046180838f,
            5.3923174227787607f, 5.4262647547020979f, 5.4594316186372973f,
            5.4918530963296748f, 5.5235619560570131f, 5.5545888516776376f,
            5.5849625007211570f, 5.6147098441152083f, 5.6438561897747244f,
            5.6724253419714961f, 5.7004397181410926f, 5.7279204545631996f,
            5.7548875021634691f, 5.7813597135246599f, 5.8073549220576046f,
            5.8328900141647422f, 5.8579809951275719f, 5.8826430493618416f,
            5.9068905956085187f, 5.9307373375628867f, 5.9541963103868758f,
            5.9772799234999168f, 6.0000000000000000f, 6.0223678130284544f,
            6.0443941193584534f, 6.0660891904577721f, 6.0874628412503400f,
            6.1085244567781700f, 6.1292830169449672f, 6.1497471195046822f,
            6.1699250014423122f, 6.1898245588800176f, 6.2094533656289510f,
            6.2288186904958804f, 6.2479275134435861f, 6.2667865406949019f,
            6.2854022188622487f, 6.3037807481771031f, 6.3219280948873617f,
            6.3398500028846252f, 6.3575520046180847f, 6.3750394313469254f,
            6.3923174227787598f, 6.4093909361377026f, 6.4262647547020979f,
            6.4429434958487288f, 6.4594316186372982f, 6.4757334309663976f,
            6.4918530963296748f, 6.5077946401986964f, 6.5235619560570131f,
            6.5391588111080319f, 6.5545888516776376f, 6.5698556083309478f,
            6.5849625007211561f, 6.5999128421871278f, 6.6147098441152092f,
            6.6293566200796095f, 6.6438561897747253f, 6.6582114827517955f,
            6.6724253419714952f, 6.6865005271832185f, 6.7004397181410917f,
            6.7142455176661224f, 6.7279204545631988f, 6.7414669864011465f,
            6.7548875021634691f, 6.7681843247769260f, 6.7813597135246599f,
            6.7944158663501062f, 6.8073549220576037f, 6.8201789624151887f,
            6.8328900141647422f, 6.8454900509443757f, 6.8579809951275719f,
            6.8703647195834048f, 6.8826430493618416f, 6.8948177633079437f,
            6.9068905956085187f, 6.9188632372745955f, 6.9307373375628867f,
            6.9425145053392399f, 6.9541963103868758f, 6.9657842846620879f,
            6.9772799234999168f, 6.9886846867721664f, 7.0000000000000000f,
            7.0112272554232540f, 7.0223678130284544f, 7.0334230015374501f,
            7.0443941193584534f, 7.0552824355011898f, 7.0660891904577721f,
            7.0768155970508317f, 7.0874628412503400f, 7.0980320829605272f,
            7.1085244567781700f, 7.1189410727235076f, 7.1292830169449664f,
            7.1395513523987937f, 7.1497471195046822f, 7.1598713367783891f,
            7.1699250014423130f, 7.1799090900149345f, 7.1898245588800176f,
            7.1996723448363644f, 7.2094533656289492f, 7.2191685204621621f,
            7.2288186904958804f, 7.2384047393250794f, 7.2479275134435861f,
            7.2573878426926521f, 7.2667865406949019f, 7.2761244052742384f,
            7.2854022188622487f, 7.2946207488916270f, 7.3037807481771031f,
            7.3128829552843557f, 7.3219280948873617f, 7.3309168781146177f,
            7.3398500028846243f, 7.3487281542310781f, 7.3575520046180847f,
            7.3663222142458151f, 7.3750394313469254f, 7.3837042924740528f,
            7.3923174227787607f, 7.4008794362821844f, 7.4093909361377026f,
            7.4178525148858991f, 7.4262647547020979f, 7.4346282276367255f,
            7.4429434958487288f, 7.4512111118323299f, 7.4594316186372973f,
            7.4676055500829976f, 7.4757334309663976f, 7.4838157772642564f,
            7.4918530963296748f, 7.4998458870832057f, 7.5077946401986964f,
            7.5156998382840436f, 7.5235619560570131f, 7.5313814605163119f,
            7.5391588111080319f, 7.5468944598876373f, 7.5545888516776376f,
            7.5622424242210728f, 7.5698556083309478f, 7.5774288280357487f,
            7.5849625007211561f, 7.5924570372680806f, 7.5999128421871278f,
            7.6073303137496113f, 7.6147098441152075f, 7.6220518194563764f,
            7.6293566200796095f, 7.6366246205436488f, 7.6438561897747244f,
            7.6510516911789290f, 7.6582114827517955f, 7.6653359171851765f,
            7.6724253419714952f, 7.6794800995054464f, 7.6865005271832185f,
            7.6934869574993252f, 7.7004397181410926f, 7.7073591320808825f,
            7.7142455176661224f, 7.7210991887071856f, 7.7279204545631996f,
            7.7347096202258392f, 7.7414669864011465f, 7.7481928495894596f,
            7.7548875021634691f, 7.7615512324444795f, 7.7681843247769260f,
            7.7747870596011737f, 7.7813597135246608f, 7.7879025593914317f,
            7.7944158663501062f, 7.8008998999203047f, 7.8073549220576037f,
            7.8137811912170374f, 7.8201789624151887f, 7.8265484872909159f,
            7.8328900141647422f, 7.8392037880969445f, 7.8454900509443757f,
            7.8517490414160571f, 7.8579809951275719f, 7.8641861446542798f,
            7.8703647195834048f, 7.8765169465650002f, 7.8826430493618425f,
            7.8887432488982601f, 7.8948177633079446f, 7.9008668079807496f,
            7.9068905956085187f, 7.9128893362299619f, 7.9188632372745955f,
            7.9248125036057813f, 7.9307373375628867f, 7.9366379390025719f,
            7.9425145053392399f, 7.9483672315846778f, 7.9541963103868758f,
            7.9600019320680806f, 7.9657842846620870f, 7.9715435539507720f,
            7.9772799234999168f, 7.9829935746943104f, 7.9886846867721664f,
            7.9943534368588578f
    };

    //2048
    public static final int[] _kBrotliContextLookupTable = {
            /* CONTEXT_LSB6, last byte. */
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,

            /* CONTEXT_LSB6, second last byte, */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

            /* CONTEXT_MSB6, last byte. */
            0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,
            4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7,
            8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11,
            12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
            16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
            20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,
            24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,
            28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31,
            32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35,
            36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
            40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43,
            44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,
            48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51,
            52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55,
            56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59,
            60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,

            /* CONTEXT_MSB6, second last byte, */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

            /* CONTEXT_UTF8, last byte. */
            /* ASCII range. */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,
            44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
            12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,
            52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,
            12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,
            60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12, 0,
            /* UTF8 continuation byte range. */
            0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            /* UTF8 lead byte range. */
            2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
            2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
            2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
            2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,

            /* CONTEXT_UTF8 second last byte. */
            /* ASCII range. */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
            1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
            1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
            /* UTF8 continuation byte range. */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            /* UTF8 lead byte range. */
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,

            /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
            0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
            40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
            40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
            40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
            48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,

            /* CONTEXT_SIGNED, second last byte. */
            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
    };
    public static final int[] kCmdHistoSeed = {
            0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 0, 0, 0, 0,
    };
    public static int[] kDistanceCacheIndex = {
            0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    };
    public static int[] kDistanceCacheOffset = {
            0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3
    };
    public static int[] kBrotliInsExtra = {
            0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 12, 14, 24
    };
    public static int[] kBrotliCopyExtra = {
            0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 24
    };
    public static BrotliPrefixCodeRange[] _kBrotliPrefixCodeRanges = {
            new BrotliPrefixCodeRange(1, 2),
            new BrotliPrefixCodeRange(5, 2),
            new BrotliPrefixCodeRange(9, 2),
            new BrotliPrefixCodeRange(13, 2),
            new BrotliPrefixCodeRange(17, 3),
            new BrotliPrefixCodeRange(25, 3),
            new BrotliPrefixCodeRange(33, 3),
            new BrotliPrefixCodeRange(41, 3),
            new BrotliPrefixCodeRange(49, 4),
            new BrotliPrefixCodeRange(65, 4),
            new BrotliPrefixCodeRange(81, 4),
            new BrotliPrefixCodeRange(97, 4),
            new BrotliPrefixCodeRange(113, 5),
            new BrotliPrefixCodeRange(145, 5),
            new BrotliPrefixCodeRange(177, 5),
            new BrotliPrefixCodeRange(209, 5),
            new BrotliPrefixCodeRange(241, 6),
            new BrotliPrefixCodeRange(305, 6),
            new BrotliPrefixCodeRange(369, 7),
            new BrotliPrefixCodeRange(369, 7),
            new BrotliPrefixCodeRange(497, 8),
            new BrotliPrefixCodeRange(753, 9),
            new BrotliPrefixCodeRange(1265, 10),
            new BrotliPrefixCodeRange(2289, 11),
            new BrotliPrefixCodeRange(4337, 12),
            new BrotliPrefixCodeRange(8433, 13),
            new BrotliPrefixCodeRange(16625, 24),
    };

    public static int[] kBrotliCopyBase = {
            2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18,
            22, 30, 38, 54, 70, 102, 134, 198, 326, 582, 1094, 2118};

    public static int[] kBrotliInsBase = {
            0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26,
            34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594};

}
