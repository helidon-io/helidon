{{!

    Copyright (c) 2023 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

}}/**
 * {{#header}}{{.}}
 * {{/header}}
 */
package {{packagename}};

import io.helidon.common.Weight;
import io.helidon.common.Weighted;

import io.helidon.pico.api.RunLevel;
import io.helidon.pico.spi.DefaultServiceInfo;
import io.helidon.pico.spi.PostConstructMethod;
import io.helidon.pico.spi.PreDestroyMethod;
import io.helidon.pico.spi.ext.Dependencies;

import jakarta.annotation.Generated;
import jakarta.inject.Provider;
import jakarta.inject.Singleton;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import static io.helidon.pico.spi.InjectionPointInfo.Access;
import static io.helidon.pico.spi.InjectionPointInfo.CTOR;
import static io.helidon.pico.spi.InjectionPointInfo.ElementKind;

/**
 * {{#description}}{{.}}
 * {{/description}}
 */
@Generated({{{generatedanno}}})
// @Singleton{{#weight}}
@Weight({{{.}}}){{/weight}} {{#isrunlevelset}}@RunLevel({{runlevel}}){{/isrunlevelset}}
@SuppressWarnings("unchecked")
public class {{flatclassname}}{{activatorsuffix}}{{{activatorgenericdecl}}} extends {{{parent}}} {
    private static final DefaultServiceInfo serviceInfo =
        DefaultServiceInfo.builder()
            .serviceTypeName({{packagename}}.{{classname}}.class.getName()){{#contracts}}
            .contractTypeImplemented({{.}}.class){{/contracts}}{{#externalcontracts}}
            .externalContractTypeImplemented({{.}}.class){{/externalcontracts}}
            .activatorType({{flatclassname}}{{activatorsuffix}}.class){{^isprovider}}{{#scopetypenames}}
            .scopeType({{{.}}}.class){{/scopetypenames}}{{/isprovider}}{{#qualifiers}}
            {{{.}}}
            {{/qualifiers}}{{#isweightset}}
            .weight({{weight}}){{/isweightset}}{{#isrunlevelset}}
            .runLevel({{runlevel}}){{/isrunlevelset}}
            .build();

    public static final {{flatclassname}}{{activatorsuffix}} INSTANCE = new {{flatclassname}}{{activatorsuffix}}();

    protected {{flatclassname}}{{activatorsuffix}}() {
        setServiceInfo(serviceInfo);
    }

    public Class<?> getServiceType() {
        return {{packagename}}.{{classname}}.class;
    }
{{#extracodegen}}{{{.}}}
{{/extracodegen}}{{^isprovider}}{{#if issupportsjsr330instrictmode}}
    @Override
    public boolean isProvider() {
        return false;
    }
{{/if}}{{/isprovider}}{{#isprovider}}
    @Override
    public boolean isProvider() {
        return true;
    }
{{/isprovider}}
    @Override
    public Dependencies getDependencies() {
        Dependencies deps = Dependencies.builder()
                .forServiceTypeName({{packagename}}.{{classname}}.class.getName())
                {{#dependencies}}{{{.}}}
                {{/dependencies}}
                .build().build();
        return Dependencies.combine(super.getDependencies(), deps);
    }
{{#isconcrete}}{{#if issupportsjsr330instrictmode}}{{#if injectionorder}}
    @Override
    public List<String> getServiceTypeInjectionOrder() {
        List<String> order = new java.util.LinkedList<>();{{#injectionorder}}
        order.add("{{{.}}}");{{/injectionorder}}
        return order;
    }
{{/if}}{{/if}}
    @Override
    protected {{classname}} createServiceProvider(Map<String, Object> deps) { {{#ctorargs}}
        {{{.}}}{{/ctorargs}}
        return new {{packagename}}.{{classname}}({{#ctorarglist}}{{.}}{{/ctorarglist}});
    }{{/isconcrete}}
{{#if injectedfields}}
    @Override
    protected void doInjectingFields(Object t, Map<String, Object> deps, Set<String> injections, String forServiceType) {
        super.doInjectingFields(t, deps, injections, forServiceType);
{{#if issupportsjsr330instrictmode}}
        if (Objects.nonNull(forServiceType) && !{{packagename}}.{{classname}}.class.getName().equals(forServiceType)) {
            return;
        }
{{/if}}
        {{classname}} target = ({{classname}}) t;
{{#if issupportsjsr330instrictmode}}{{#injectedfields}}
        if (injections.add("{{{id}}}")) {
            target.{{{.}}};
        }{{/injectedfields}}{{else}}{{#injectedfields}}
        target.{{{.}}};{{/injectedfields}}
{{/if}}
    }
{{/if}}{{#if injectedmethods}}
    @Override
    protected void doInjectingMethods(Object t, Map<String, Object> deps, Set<String> injections, String forServiceType) { {{#if injectedmethodsskippedinparent}}
        if (injections.isEmpty()) { {{#injectedmethodsskippedinparent}}
            injections.add("{{{id}}}");{{/injectedmethodsskippedinparent}}
        }{{/if}}
        super.doInjectingMethods(t, deps, injections, forServiceType);
{{#if issupportsjsr330instrictmode}}
        if (Objects.nonNull(forServiceType) && !{{packagename}}.{{classname}}.class.getName().equals(forServiceType)) {
            return;
        }
{{/if}}
        {{classname}} target = ({{classname}}) t;
{{#if issupportsjsr330instrictmode}}{{#injectedmethods}}
        if (injections.add("{{{id}}}")) {
            target.{{{.}}};
        }{{/injectedmethods}}{{else}}{{#injectedmethods}}
        target.{{{.}}};{{/injectedmethods}}
{{/if}}
    }
{{/if}}{{#postconstruct}}
    @Override
    public PostConstructMethod getPostConstructMethod() {
        {{classname}} target = ({{classname}}) getServiceRef();
        return target::{{.}};
    }
{{/postconstruct}}{{#predestroy}}
    @Override
    public PreDestroyMethod getPreDestroyMethod() {
        {{classname}} target = ({{classname}}) getServiceRef();
        return target::{{.}};
    }
{{/predestroy}}
}
