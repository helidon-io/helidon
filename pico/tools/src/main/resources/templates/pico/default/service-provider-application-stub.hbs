/**
 * {{#header}}{{.}}
 * {{/header}}
*/
package {{packagename}};

import java.util.Optional;

import io.helidon.pico.spi.Application;
import io.helidon.pico.spi.ServiceInjectionPlanBinder;

import jakarta.annotation.Generated;
import jakarta.inject.Named;
import jakarta.inject.Singleton;

/**
 * THIS IS A TEMPORARY PLACEHOLDER.
 * It is expected that this module should have eventually generated the "final" Application using the pico-maven-plugin
 * attached to the compile phase. See the documentation for more information.
*/
@Generated({{{generatedanno}}})
@Singleton {{#modulename}}@Named({{classname}}.NAME){{/modulename}}
public class {{classname}} implements Application {
{{#modulename}}
    static final String NAME = "{{{.}}}";
{{/modulename}}{{^modulename}}
    static final String NAME = "unnamed";{{/modulename}}

    @Override
    public Optional<String> getName() {
        return Optional.of(NAME);
    }

    @Override
    public String toString() {
        return NAME + "(temporary):" + getClass().getName();
    }

    @Override
    public void configure(ServiceInjectionPlanBinder binder) {
        throw new IllegalStateException("The application is in an invalid state.\n"
                + "The pico-maven-plugin either did not get run, or failed to generate the final replacement to this class: " + this
                + "\nPlease check the logs or consult the documentation.");
    }

}
