{{!
Copyright (c) 2023 Oracle and/or its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}{{#header}}{{.}}
{{/header}}
package {{packagename}};

import java.util.Optional;

import io.helidon.pico.api.Application;
import io.helidon.pico.api.ServiceInjectionPlanBinder;

import jakarta.annotation.Generated;
import jakarta.inject.Named;
import jakarta.inject.Singleton;

/**{{#description}}
 * {{{.}}}{{/description}}
 */
@Generated({{{generatedanno}}})
@Singleton {{#modulename}}@Named({{classname}}.NAME){{/modulename}}
public final class {{classname}} implements Application {
{{#modulename}}
    static final String NAME = "{{{.}}}";{{/modulename}}{{^modulename}}
    static final String NAME = "unnamed";{{/modulename}}
    static boolean enabled = true;

    /**
     * Service loader based constructor.
     *
     * @deprecated this is a Java ServiceLoader implementation and the constructor should not be used directly
     */
    @Deprecated
    public {{classname}}() {
    }

    @Override
    public Optional<String> named() {
        return Optional.of(NAME);
    }

    @Override
    public String toString() {
        return NAME + ":" + getClass().getName();
    }

    @Override
    public void configure(ServiceInjectionPlanBinder binder) {
        if (!enabled) {
            return;
        }
{{#servicetypebindings}}
        {{{.}}}{{/servicetypebindings}}
    }

}
