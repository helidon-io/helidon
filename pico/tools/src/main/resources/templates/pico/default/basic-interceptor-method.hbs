    @Override
    public {{{elementEnclosingTypeName}}} {{elementName}}({{{elementArgs-declaration}}}) {{{elementThrows-declaration}}} {
        if (Objects.isNull(interceptor)) {
            return delegate.get().{{elementName}}({{{elementArgs-declaration-notypes}}});
        } else {
            Provider<T> delegate = interceptor.providerFor(this.delegate, "{{elementName}}");
            interceptor.beforeCall(delegate, "{{elementName}}"{{#elementArgs-declaration-notypes}}, {{{elementArgs-declaration-notypes}}}{{/elementArgs-declaration-notypes}});
            Throwable t = null;
            String result = null;
            try {
                result = delegate.get().{{elementName}}({{{elementArgs-declaration-notypes}}});
            } catch (Throwable t1) {
                t = t1;
            } finally {
                if (Objects.isNull(t)) {
                    interceptor.afterCall(delegate, result, "{{elementName}}");
                    return result;
                } else {
                    RuntimeException re = interceptor.afterFailedCall(t, delegate, "{{elementName}}"{{#elementArgs-declaration-notypes}}, {{{elementArgs-declaration-notypes}}}{{/elementArgs-declaration-notypes}});
                    {{#elementThrows}}if (t instanceof {{{.}}}) {
                        throw ({{{.}}}) t;
                    } {{/elementThrows}}
                    throw re;
                }
            }
        }
    }
