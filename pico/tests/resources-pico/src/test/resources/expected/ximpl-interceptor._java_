// This is a generated file (powered by Helidon). Do not edit or extend from this artifact as it is subject to change at any time!

package io.helidon.pico.tests.pico.interceptor;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Function;

import io.helidon.common.types.Annotation;
import io.helidon.common.types.TypeName;
import io.helidon.common.types.TypedElementInfo;
import io.helidon.common.types.TypeName;
import io.helidon.common.types.TypedElementInfo;
import io.helidon.common.types.TypeValues;
import io.helidon.pico.api.ClassNamed;
import io.helidon.pico.api.InvocationContext;
import io.helidon.pico.api.Interceptor;
import io.helidon.pico.api.InvocationException;
import io.helidon.pico.api.ServiceProvider;
import io.helidon.pico.runtime.InterceptedMethod;

import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.inject.Provider;
import jakarta.inject.Singleton;

import static io.helidon.common.types.TypeName.create;
import static io.helidon.pico.runtime.Invocation.createInvokeAndSupply;
import static io.helidon.pico.runtime.Invocation.mergeAndCollapse;

/**
 * Pico {@link Interceptor} for {@link io.helidon.pico.tests.pico.interceptor.XImpl }.
 */
// using the no-arg constructor approach
@io.helidon.common.Weight(100.001)
@io.helidon.pico.api.Intercepted(io.helidon.pico.tests.pico.interceptor.XImpl.class)
@Singleton
@SuppressWarnings("ALL")
@io.helidon.common.Generated(value = "io.helidon.pico.tools.InterceptorCreatorDefault", trigger = "io.helidon.pico.tests.pico.interceptor.XImpl")
public class XImpl$$Pico$$Interceptor extends io.helidon.pico.tests.pico.interceptor.XImpl {
    private static final List<Annotation> __serviceLevelAnnotations = List.of(
            Annotation.create(jakarta.inject.Singleton.class),
            Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")),
            Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")),
            Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")),
            Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")));

    private static final TypedElementInfo __ctor = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_CONSTRUCTOR)
			.elementName(io.helidon.pico.api.ElementInfo.CONSTRUCTOR)
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Inject.class))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodIA1 = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodIA1")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.Override.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodIA2 = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodIA2")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno.class, Map.of("value", "IA2")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.Override.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodIB = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodIB")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno.class, Map.of("value", "IBSubAnno")))
			.addAnnotation(Annotation.create(jakarta.inject.Named.class, Map.of("value", "methodIB")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.Override.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodIB__p1 = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("p1")
			.addAnnotation(Annotation.create(jakarta.inject.Named.class, Map.of("value", "arg1")))
            .build();
    private static final TypedElementInfo __methodIB2 = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodIB2")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno.class, Map.of("value", "IBSubAnno")))
			.addAnnotation(Annotation.create(jakarta.inject.Named.class, Map.of("value", "methodIB2")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.Override.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodIB2__p1 = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("p1")
			.addAnnotation(Annotation.create(jakarta.inject.Named.class, Map.of("value", "arg1")))
            .build();
    private static final TypedElementInfo __close = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("close")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno.class, Map.of("value", "")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.Override.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodX = TypedElementInfo.builder()
            .typeName(create(long.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodX")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodX__p1 = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("p1")
            .build();
    private static final TypedElementInfo __methodX__p2 = TypedElementInfo.builder()
            .typeName(create(int.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("p2")
            .build();
    private static final TypedElementInfo __methodX__p3 = TypedElementInfo.builder()
            .typeName(create(boolean.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("p3")
            .build();
    private static final TypedElementInfo __methodY = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodY")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __methodZ = TypedElementInfo.builder()
            .typeName(create(java.lang.String.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("methodZ")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();
    private static final TypedElementInfo __throwRuntimeException = TypedElementInfo.builder()
            .typeName(create(void.class))
			.elementTypeKind(TypeValues.KIND_METHOD)
			.elementName("throwRuntimeException")
			.addAnnotation(Annotation.create(io.helidon.pico.api.ClassNamed.class, Map.of("value", "io.helidon.pico.tests.pico.ClassNamedX")))
			.addAnnotation(Annotation.create(io.helidon.pico.api.ExternalContracts.class, Map.of("moduleNames", "test1, test2", "value", "java.io.Closeable")))
			.addAnnotation(Annotation.create(io.helidon.pico.tests.pico.interceptor.TestNamed.class, Map.of("value", "TestNamed-ClassX")))
			.addAnnotation(Annotation.create(jakarta.inject.Singleton.class))
			.addAnnotation(Annotation.create(java.lang.SuppressWarnings.class, Map.of("value", "unused")))
            .build();

    private static final TypeName __serviceTypeName = TypeName.create(io.helidon.pico.tests.pico.interceptor.XImpl.class);

    private final Provider<io.helidon.pico.tests.pico.interceptor.XImpl> __provider;
    private final ServiceProvider<io.helidon.pico.tests.pico.interceptor.XImpl> __sp;
    private final io.helidon.pico.tests.pico.interceptor.XImpl __impl;
    private final List<Provider<Interceptor>> __methodIA1__interceptors;
    private final List<Provider<Interceptor>> __methodIA2__interceptors;
    private final List<Provider<Interceptor>> __methodIB__interceptors;
    private final List<Provider<Interceptor>> __methodIB2__interceptors;
    private final List<Provider<Interceptor>> __close__interceptors;
    private final List<Provider<Interceptor>> __methodX__interceptors;
    private final List<Provider<Interceptor>> __methodY__interceptors;
    private final List<Provider<Interceptor>> __methodZ__interceptors;
    private final List<Provider<Interceptor>> __throwRuntimeException__interceptors;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void> __methodIA1__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void> __methodIA2__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void> __methodIB__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String> __methodIB2__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void> __close__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Long> __methodX__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String> __methodY__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String> __methodZ__call;
    private final InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void> __throwRuntimeException__call;

    @Inject
    @SuppressWarnings("unchecked")
    XImpl$$Pico$$Interceptor(
                @ClassNamed(io.helidon.pico.tests.pico.interceptor.TestNamed.class) List<Provider<Interceptor>> io_helidon_pico_tests_pico_interceptor_TestNamed,
                @ClassNamed(io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno.class) List<Provider<Interceptor>> io_helidon_pico_tests_plain_interceptor_InterceptorBasedAnno,
                Provider<io.helidon.pico.tests.pico.interceptor.XImpl> provider) {
        this.__provider = Objects.requireNonNull(provider);
        this.__sp = (provider instanceof ServiceProvider) ? (ServiceProvider<io.helidon.pico.tests.pico.interceptor.XImpl>) __provider : null;
        List<Provider<Interceptor>> __ctor__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);
        this.__methodIA1__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);
        this.__methodIA2__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed, io_helidon_pico_tests_plain_interceptor_InterceptorBasedAnno);
        this.__methodIB__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed, io_helidon_pico_tests_plain_interceptor_InterceptorBasedAnno);
        this.__methodIB2__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed, io_helidon_pico_tests_plain_interceptor_InterceptorBasedAnno);
        this.__close__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed, io_helidon_pico_tests_plain_interceptor_InterceptorBasedAnno);
        this.__methodX__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);
        this.__methodY__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);
        this.__methodZ__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);
        this.__throwRuntimeException__interceptors = mergeAndCollapse(io_helidon_pico_tests_pico_interceptor_TestNamed);

        Function<Object[], io.helidon.pico.tests.pico.interceptor.XImpl> call = args -> __provider.get();
        io.helidon.pico.tests.pico.interceptor.XImpl result = createInvokeAndSupply(
                InvocationContext.builder()
                    .serviceProvider(__sp)
                    .serviceTypeName(__serviceTypeName)
                    .classAnnotations(__serviceLevelAnnotations)
                    .elementInfo(__ctor)
                    .interceptors(__ctor__interceptors)
                    .build(),
                call,
                new Object[0]);
        this.__impl = Objects.requireNonNull(result);

        this.__methodIA1__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodIA1__interceptors, __methodIA1) {
            @Override
            public java.lang.Void invoke(Object... args) throws Throwable {
                impl().methodIA1();
                return null;
            }
        };

        this.__methodIA2__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodIA2__interceptors, __methodIA2) {
            @Override
            public java.lang.Void invoke(Object... args) throws Throwable {
                impl().methodIA2();
                return null;
            }
        };

        this.__methodIB__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodIB__interceptors, __methodIB,
				List.of(__methodIB__p1)) {
            @Override
            public java.lang.Void invoke(Object... args) throws Throwable {
                impl().methodIB((java.lang.String) args[0]);
                return null;
            }
        };

        this.__methodIB2__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodIB2__interceptors, __methodIB2,
				List.of(__methodIB2__p1)) {
            @Override
            public java.lang.String invoke(Object... args) throws Throwable {
                return impl().methodIB2((java.lang.String) args[0]);
            }
        };

        this.__close__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __close__interceptors, __close) {
            @Override
            public java.lang.Void invoke(Object... args) throws Throwable {
                impl().close();
                return null;
            }
        };

        this.__methodX__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Long>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodX__interceptors, __methodX,
				List.of(__methodX__p1, __methodX__p2, __methodX__p3)) {
            @Override
            public java.lang.Long invoke(Object... args) throws Throwable {
                return impl().methodX((java.lang.String) args[0], (java.lang.Integer) args[1], (java.lang.Boolean) args[2]);
            }
        };

        this.__methodY__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodY__interceptors, __methodY) {
            @Override
            public java.lang.String invoke(Object... args) throws Throwable {
                return impl().methodY();
            }
        };

        this.__methodZ__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.String>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __methodZ__interceptors, __methodZ) {
            @Override
            public java.lang.String invoke(Object... args) throws Throwable {
                return impl().methodZ();
            }
        };

        this.__throwRuntimeException__call = new InterceptedMethod<io.helidon.pico.tests.pico.interceptor.XImpl, java.lang.Void>(
                __impl, __sp, __serviceTypeName, __serviceLevelAnnotations, __throwRuntimeException__interceptors, __throwRuntimeException) {
            @Override
            public java.lang.Void invoke(Object... args) throws Throwable {
                impl().throwRuntimeException();
                return null;
            }
        };
    }

    @Override
    public void methodIA1() {
        Object[] args = new Object[] {  };
        createInvokeAndSupply(__methodIA1__call.ctx(), __interceptedArgs -> __methodIA1__call.apply(__interceptedArgs), args);
    }

    @Override
    public void methodIA2() {
        Object[] args = new Object[] {  };
        createInvokeAndSupply(__methodIA2__call.ctx(), __interceptedArgs -> __methodIA2__call.apply(__interceptedArgs), args);
    }

    @Override
    public void methodIB(java.lang.String p1) {
        Object[] args = new Object[] { p1 };
        createInvokeAndSupply(__methodIB__call.ctx(), __interceptedArgs -> __methodIB__call.apply(__interceptedArgs), args);
    }

    @Override
    public java.lang.String methodIB2(java.lang.String p1) {
        Object[] args = new Object[] { p1 };
        return createInvokeAndSupply(__methodIB2__call.ctx(), __interceptedArgs -> __methodIB2__call.apply(__interceptedArgs), args);
    }

    @Override
    public void close() throws java.io.IOException, java.lang.RuntimeException {
        Object[] args = new Object[] {  };
        createInvokeAndSupply(__close__call.ctx(), __interceptedArgs -> __close__call.apply(__interceptedArgs), args);
    }

    @Override
    public long methodX(java.lang.String p1, int p2, boolean p3) throws java.io.IOException, java.lang.RuntimeException, java.lang.AssertionError {
        Object[] args = new Object[] { p1, p2, p3 };
        return createInvokeAndSupply(__methodX__call.ctx(), __interceptedArgs -> __methodX__call.apply(__interceptedArgs), args);
    }

    @Override
    public java.lang.String methodY() {
        Object[] args = new Object[] {  };
        return createInvokeAndSupply(__methodY__call.ctx(), __interceptedArgs -> __methodY__call.apply(__interceptedArgs), args);
    }

    @Override
    public java.lang.String methodZ() {
        Object[] args = new Object[] {  };
        return createInvokeAndSupply(__methodZ__call.ctx(), __interceptedArgs -> __methodZ__call.apply(__interceptedArgs), args);
    }

    @Override
    public void throwRuntimeException() {
        Object[] args = new Object[] {  };
        createInvokeAndSupply(__throwRuntimeException__call.ctx(), __interceptedArgs -> __throwRuntimeException__call.apply(__interceptedArgs), args);
    }

}