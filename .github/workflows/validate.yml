# Notes
# - cannot run on Windows, as we use shell scripts
# - removed macos from most jobs to speed up the process

name: "Validate"

on:
  pull_request:
  push:
    branches-ignore: [ 'main', 'helidon-*.x' ]
  workflow_call:

env:
  JAVA_VERSION: '21'
  JAVA_DISTRO: 'oracle'
  HELIDON_PIPELINES: 'true'
  MAVEN_ARGS: |
    -Dmaven.wagon.httpconnectionManager.ttlSeconds=60
    -Dmaven.wagon.http.retryHandler.count=3

concurrency:
  group: Validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  copyright:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v4
       with:
         fetch-depth: 0
     - name: Set up JDK ${{ env.JAVA_VERSION }}
       uses: actions/setup-java@v4.1.0
       with:
         distribution: ${{ env.JAVA_DISTRO }}
         java-version: ${{ env.JAVA_VERSION }}
         cache: maven
     - name: Copyright
       run: etc/scripts/copyright.sh
  checkstyle:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Checkstyle
        run: etc/scripts/checkstyle.sh
  shellcheck:
    timeout-minutes: 5
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: ShellCheck
        run: etc/scripts/shellcheck.sh
  spotbugs:
    timeout-minutes: 45
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Spotbugs
        run: |
          mvn ${MAVEN_ARGS} -e \
            -DskipTests \
            -Dmaven.test.skip=true \
            -Pspotbugs,pipeline \
            install
  docs:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Docs
        run: |
          mvn ${MAVEN_ARGS} -e \
            -Dmaven.test.skip=true \
            -DskipTests \
            -Ppipeline \
            install
          mvn ${MAVEN_ARGS} -e \
            -f docs/pom.xml \
            -Pjavadoc \
             install
  build:
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Maven build
        run: |
          mvn ${MAVEN_ARGS} -e \
            -Dmaven.test.failure.ignore=false \
            -Pjavadoc,sources,tests,pipeline \
            install
  examples:
    timeout-minutes: 40
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: 21
          distribution: graalvm-community
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: true
          cache: maven
      - name: Maven build
        run: |
          # prime build
          mvn ${MAVEN_ARGS} -e \
          -Dmaven.test.skip=true \
          -DskipTests \
          -Ppipeline \
          install
      - name: Examples checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          repository: helidon-io/helidon-examples.git
          ref: dev-4.x
          path: helidon-examples
      - name: Examples build
        run: etc/scripts/build-examples.sh
      - name: Test quickstarts native image
        run: etc/scripts/test-quickstarts.sh
  mp-tck:
    timeout-minutes: 60
    name: "MicroProfile TCKs"
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Maven build
        run: |
          # prime build
          mvn ${MAVEN_ARGS} -e \
            -Dmaven.test.skip=true \
            -DskipTests \
            -Ppipeline \
            install
          mvn ${MAVEN_ARGS} -e \
            -f microprofile/tests/tck/pom.xml \
            -Ptck-ft \
            verify
  archetypes:
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4.1.0
        with:
          distribution: ${{ env.JAVA_DISTRO }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Test archetypes
        run: |
          # prime build
          mvn ${MAVEN_ARGS} -e \
            -Dmaven.test.skip=true \
            -DskipTests \
            -Ppipeline \
            install
          mvn ${MAVEN_ARGS} -e \
            -f archetypes/pom.xml \
            install
  packaging:
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: 21
          distribution: graalvm-community
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: true
          cache: maven
      - name: Build Helidon
        run: |
          # prime build
          mvn ${MAVEN_ARGS} -e \
            -Dmaven.test.skip=true \
            -DskipTests \
            -Ppipeline \
            install
      - name: JAR packaging
        run: etc/scripts/test-packaging-jar.sh
      - name: JLink packaging
        run: etc/scripts/test-packaging-jlink.sh
      - name: Native-Image packaging
        run: etc/scripts/test-packaging-native.sh
