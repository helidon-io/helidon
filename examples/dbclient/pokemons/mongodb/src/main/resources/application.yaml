#
# Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

server:
  port: 8079
  host: 0.0.0.0
  features:
    print-details: true

# docker run --rm --name mongo -p 27017:27017 mongo
db:
  source: "mongoDb"
  connection:
    url: "mongodb://127.0.0.1:27017/pokemon"
  statements:
    ## Ping statement
    ping: '{
            "operation": "command",
            "query": { ping: 1 }
        }'
    ## Create database schema
    create-types: "CREATE TABLE Types (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-pokemons: "CREATE TABLE Pokemons (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-poketypes: "CREATE TABLE PokemonTypes (id_pokemon INTEGER NOT NULL REFERENCES Pokemon(id), id_type INTEGER NOT NULL REFERENCES Type(id))"
    # Select all pokemons without type information
    select-all-pokemons: '{
            "collection": "pokemons",
            "projection": { id: 1, name: 1, _id: 0 },
            "query": {}
        }'
    # Select type names for pokemon specified by id
    # TODO: Rewrite to MongoDB statement
    select-type-by-pokemon: "SELECT t.name AS name FROM Types t INNER JOIN PokemonTypes p ON p.id_type = t.it WHERE p.id_pokemon = :idPokemon"
    # Select pokemon by id
    select-pokemon-by-id: '{
            "collection": "pokemons",
            "operation": "query",
            "projection": { id: 1, name: 1, _id: 0 },
            "query": { id: $id }
        }'
    # Select pokemon by name
    select-pokemon-by-name: '{
            "collection": "pokemons",
            "operation": "query",
            "projection": { id: 1, name: 1, _id: 0 },
            "query": { name: ? }
        }'
    # Insert records into database
    insert-type: '{
            "collection": "types",
            "value": {
                "id": ?,
                "type": ?
            }
        }'
    insert-pokemon: '{
            "collection": "pokemons",
            "value": {
                "id": ?,
                "name": ?
            }
        }'
    insert-poketype: '{
            "collection": "pokemon_types",
            "value": {
                "id_pokemon": ?,
                "id_type": ?
            }
        }'
    # Update name of pokemon specified by id
    update-pokemon-name-by-id: '{
            "collection": "pokemons",
            "operation": "update",
            "value":{ $set: { "name": $name } },
            "query": { id: $id }
        }'
    # Delete all types relation for pokemon specified by id
    delete-poketype-by-id-pokemon:  '{
            "collection": "pokemon_types",
            "operation": "delete",
            "query": { id_pokemon: $id }
        }'
    # "DELETE FROM PokemonTypes WHERE id_pokemon = :id"
    # Delete pokemon by id
    delete-pokemon-by-id: '{
            "collection": "pokemons",
            "operation": "delete",
            "query": { id: $id }
        }'
    # Delete all types
    delete-all-types: '{
            "collection": "types",
            "operation": "delete",
            "query": { }
        }'
    # Delete all types relation
    delete-all-poketypes:  '{
            "collection": "pokemon_types",
            "operation": "delete",
            "query": { }
        }'
    # Delete all pokemons
    delete-all-pokemons: '{
            "collection": "pokemons",
            "operation": "delete",
            "query": { }
        }'
