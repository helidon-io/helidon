#
# Copyright (c) 2019, 2021 Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

server:
  port: 8079
  host: 0.0.0.0
  features:
    print-details: true

tracing:
  service: jdbc-db

# see README.md for details how to run databases in docker
db:
  source: jdbc
  connection:
    #
    # Oracle configuration
    #
    url: "jdbc:oracle:thin:@localhost:1521/XE"
    username: "system"
    password: "oracle"
    poolName: "oracle"
    #
    # MySQL configuration
    #
#    url: jdbc:mysql://127.0.0.1:3306/pokemon?useSSL=false
#    username: user
#    password: password
#    poolName: "mysql"
    #
    # H2 configuration
    #
#    url: "jdbc:h2:tcp://localhost:9092/~test"
#    username: h2
#    password: ""
#    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  services:
    tracing:
      - enabled: true
    metrics:
      - type: METER
  health-check:
    type: "query"
    statementName: "health-check"
  statements:
    # Health check query statement for MySQL and H2 databases
#    health-check: "SELECT 0"
    # Health check query statement for Oracle database
    health-check: "SELECT 1 FROM DUAL"
    ## Create database schema (table "Types" is system in H2)
    create-types: "CREATE TABLE PokeTypes (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-pokemons: "CREATE TABLE Pokemons (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL, id_type INTEGER NOT NULL REFERENCES PokeTypes(id))"
    # Select all types
    select-all-types: "SELECT id, name FROM PokeTypes"
    # Select all pokemons without type information
    select-all-pokemons: "SELECT id, name, id_type FROM Pokemons"
    # Select pokemon by id
    select-pokemon-by-id: "SELECT id, name, id_type FROM Pokemons WHERE id = :id"
    # Select pokemon by name
    select-pokemon-by-name: "SELECT id, name, id_type FROM Pokemons WHERE name = ?"
    # Insert records into database
    insert-type: "INSERT INTO PokeTypes(id, name) VALUES(?, ?)"
    insert-pokemon: "INSERT INTO Pokemons(id, name, id_type) VALUES(?, ?, ?)"
    # Update name of pokemon specified by id
    update-pokemon-by-id: "UPDATE Pokemons SET name = :name, id_type = :idType WHERE id = :id"
    # Delete pokemon by id
    delete-pokemon-by-id: "DELETE FROM Pokemons WHERE id = :id"
    # Delete all types
    delete-all-types: "DELETE FROM PokeTypes"
    # Delete all pokemons
    delete-all-pokemons: "DELETE FROM Pokemons"
