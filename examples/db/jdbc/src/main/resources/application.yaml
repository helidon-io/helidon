#
# Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

server:
  port: 8080
  host: 0.0.0.0

tracing:
  service: jdbc-db

# docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7
db:
  source: jdbc
  url: jdbc:mysql://127.0.0.1:3306/pokemon?useSSL=false
  username: user
  password: password
  interceptors:
    tracing:
      global:
    metrics:
      # possible also global:
      global:
        - type: METER
          # changing the name format - by removing the parameter (statement name) we get an overall metric
          name-format: "db.meter.overall"
        - type: METER
          # meter per statement name
        - type: METER
          # meter per statement type
          name-format: "db.meter.%2$s"
      named:
        - names: ["select-all", "select-one"]
          errors: false
          type: TIMER
          description: "Timer for successful selects"
      typed:
        - types: ["DELETE", "UPDATE", "INSERT", "DML"]
          type: COUNTER
          errors: false
          name-format: "db.counter.%s.success"
          description: "Counter of successful DML statements"
        - types: ["DELETE", "UPDATE", "INSERT", "DML"]
          type: COUNTER
          success: false
          name-format: "db.counter.%s.error"
          description: "Counter of failed DML statements"
  statements:
    # required ping statement
    ping: "DO 0"
    # Insert new pokemon
    create-table: "CREATE TABLE pokemons (name VARCHAR(64) NOT NULL PRIMARY KEY, type VARCHAR(32))"
    insert1: "INSERT INTO pokemons VALUES(?, ?)"
    insert2: "INSERT INTO pokemons VALUES(:name, :type)"
    select-by-type: "SELECT * FROM pokemons WHERE type = ?"
    select-one: "SELECT * FROM pokemons WHERE name = ?"
    select-all: "SELECT * FROM pokemons"
    update: "UPDATE pokemons SET type = :type WHERE name = :name"
    delete: "DELETE FROM pokemons WHERE name = ?"
    delete-all: "DELETE FROM pokemons"
