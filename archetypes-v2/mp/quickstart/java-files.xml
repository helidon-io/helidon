<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-script-2.0.xsd">

    <output>
        <templates engine="mustache" transformations="mustache,packaged">
            <directory>files/src/main/java</directory>
            <includes>
                <include>**/*.mustache</include>
            </includes>
        </templates>
        <model>
            <list key="imports">
                <map>
                    <value key="import">javax.json.JsonObject</value>
                </map>
                <map>
                    <value key="import">javax.ws.rs.Consumes</value>
                </map>
                <map>
                    <value key="import">javax.ws.rs.PUT</value>
                </map>
                <map>
                    <value key="import">javax.ws.rs.PathParam</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.enums.SchemaType</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.media.Content</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.media.Schema</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.parameters.RequestBody</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.responses.APIResponse</value>
                </map>
                <map>
                    <value key="import">org.eclipse.microprofile.openapi.annotations.responses.APIResponses</value>
                </map>
            </list>
            <value key="getDefaultMessage"><![CDATA[
                return createResponse("World");
            ]]></value>
            <value key="constructor"><![CDATA[/**
     * The greeting message provider.
     */
    private final GreetingProvider greetingProvider;

    /**
     * Using constructor injection to get a configuration property.
     * By default this gets the value from META-INF/microprofile-config
     *
     * @param greetingConfig the configured greeting message
     */
    @Inject
    public GreetResource(GreetingProvider greetingConfig) {
        this.greetingProvider = greetingConfig;
    }
            ]]></value>
            <value key="quickstart-mp-greetResource"><![CDATA[
        /**
         * Return a greeting message using the name that was provided.
         *
         * @param name the name to greet
         * @return {@link JsonObject}
         */
        @SuppressWarnings("checkstyle:designforextension")
        @Path("/{name}")
        @GET
        @Produces(MediaType.APPLICATION_JSON)
        public JsonObject getMessage(@PathParam("name") String name) {
            return createResponse(name);
        }

        /**
         * Set the greeting to use in future messages.
         *
         * @param jsonObject JSON containing the new greeting
         * @return {@link Response}
         */
        @SuppressWarnings("checkstyle:designforextension")
        @Path("/greeting")
        @PUT
        @Consumes(MediaType.APPLICATION_JSON)
        @Produces(MediaType.APPLICATION_JSON)
        @RequestBody(name = "greeting",
                required = true,
                content = @Content(mediaType = "application/json",
                        schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
        @APIResponses({
                @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
                @APIResponse(name = "missing 'greeting'", responseCode = "400",
                        description = "JSON did not contain setting for 'greeting'")})
        public Response updateGreeting(JsonObject jsonObject) {

            if (!jsonObject.containsKey("greeting")) {
                JsonObject entity = JSON.createObjectBuilder()
                        .add("error", "No greeting provided")
                        .build();
                return Response.status(Response.Status.BAD_REQUEST).entity(entity).build();
            }

            String newGreeting = jsonObject.getString("greeting");

            greetingProvider.setMessage(newGreeting);
            return Response.status(Response.Status.NO_CONTENT).build();
        }

        private JsonObject createResponse(String who) {
            String msg = String.format("%s %s!", greetingProvider.getMessage(), who);

            return JSON.createObjectBuilder()
                    .add("message", msg)
                    .build();
        }
            ]]></value>
        </model>
    </output>
</archetype-script>
