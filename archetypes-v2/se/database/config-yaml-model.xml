<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021 Oracle and/or its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<archetype-script xmlns="https://helidon.io/archetype/2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="https://helidon.io/archetype/2.0 https://helidon.io/xsd/archetype-script-2.0.xsd">

    <output>
        <model>
            <value key="db-config-yaml"><![CDATA[
db:
  source: jdbc
  connection:
    url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
    # url: jdbc:h2:tcp://localhost:1521/test
    username: sa
    password:
    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  services:
    metrics:
      - type: METER
  statements:
    # Ping statement
    ping: "SET @HELIDON_PING=0"
    # Create database schema
    create-types: "CREATE TABLE POKEMONTYPE (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-pokemons: "CREATE TABLE POKEMON (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL, id_type INTEGER NOT NULL REFERENCES POKEMONTYPE(id))"
    # Select all types
    select-all-types: "SELECT id, name FROM POKEMONTYPE"
    # Select all pokemons
    select-all-pokemons: "SELECT id, name, id_type FROM POKEMON"
    # Select pokemon by id
    select-pokemon-by-id: "SELECT id, name, id_type FROM POKEMON WHERE id = :id"
    # Select pokemon by name
    select-pokemon-by-name: "SELECT id, name, id_type FROM POKEMON WHERE name = ?"
    # Insert records into database
    insert-type: "INSERT INTO POKEMONTYPE(id, name) VALUES(?, ?)"
    insert-pokemon: "INSERT INTO POKEMON(id, name, id_type) VALUES(?, ?, ?)"
    # Delete pokemon by id
    delete-pokemon-by-id: "DELETE FROM POKEMON WHERE id = :id"

health:
  statementName: "ping"
            ]]></value>
        </model>
    </output>
</archetype-script>
