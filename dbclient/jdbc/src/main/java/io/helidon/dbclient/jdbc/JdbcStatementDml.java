/*
 * Copyright (c) 2019, 2025 Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.helidon.dbclient.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import io.helidon.dbclient.DbClientException;
import io.helidon.dbclient.DbClientServiceContext;
import io.helidon.dbclient.DbResultDml;
import io.helidon.dbclient.DbRow;
import io.helidon.dbclient.DbStatementDml;
import io.helidon.dbclient.DbStatementException;
import io.helidon.dbclient.DbStatementType;

/**
 * JDBC implementation of {@link DbStatementDml}.
 */
class JdbcStatementDml extends JdbcStatement<DbStatementDml> implements DbStatementDml {

    static final String[] EMPTY_STRING_ARRAY = new String[0];

    private final DbStatementType type;
    // Column names to be returned from the inserted row or rows from the statement execution.
    // Value of null (default) indicates no columns are set.
    private List<String> columnNames = List.of();
    // Whether PreparedStatement shall be created with Statement.RETURN_GENERATED_KEYS:
    // - value of false (default) indicates that autoGeneratedKeys won't be passed to PreparedStatement creation
    // - value of true indicates that Statement.RETURN_GENERATED_KEYS as autoGeneratedKeys will be passed
    //   to PreparedStatement creation
    private boolean returnGeneratedKeys;

    /**
     * Create a new instance.
     *
     * @param connectionPool connection pool
     * @param context        execution context
     */
    JdbcStatementDml(JdbcConnectionPool connectionPool, DbStatementType type, JdbcExecuteContext context) {
        super(connectionPool, context);
        this.type = type;
    }

    @Override
    public DbStatementType statementType() {
        return type;
    }

    @Override
    public long execute() {
        return doExecute((future, context) -> {
            try {
                return doExecute(this, future, context);
            } finally {
                closeConnection();
            }
        });
    }

    @Override
    public DbResultDml insert() {
        return doExecute((future, context) -> doInsert(this, future, context, this::closeConnection));
    }

    @Override
    public DbStatementDml returnGeneratedKeys() {
        if (!columnNames.isEmpty()) {
            throw new IllegalStateException("Method returnColumns(String[]) was already called to set specific column names.");
        }
        returnGeneratedKeys = true;
        return this;
    }

    @Override
    public DbStatementDml returnColumns(List<String> columnNames) {
        if (returnGeneratedKeys) {
            throw new IllegalStateException("Method returnGeneratedKeys() was already called.");
        }
        Objects.requireNonNull(columnNames, "List of column names value is null");
        this.columnNames = Collections.unmodifiableList(columnNames);
        return this;
    }

    @Override
    protected PreparedStatement prepareStatement(Connection connection, String stmtName, String stmt) {
        try {
            connection(connection);
            if (returnGeneratedKeys) {
                return connection.prepareStatement(stmt, Statement.RETURN_GENERATED_KEYS);
            } else if (!columnNames.isEmpty()) {
                return connection.prepareStatement(stmt, columnNames.toArray(EMPTY_STRING_ARRAY));
            }
            return connection.prepareStatement(stmt);
        } catch (SQLException e) {
            throw new DbClientException(String.format("Failed to prepare statement: %s", stmtName), e);
        }
    }

    /**
     * Execute the given statement.
     *
     * @param dbStmt  db statement
     * @param future  query future
     * @param context service context
     * @return query result
     */
    static long doExecute(JdbcStatement<? extends DbStatementDml> dbStmt,
                          CompletableFuture<Long> future,
                          DbClientServiceContext context) {

        try (PreparedStatement statement = dbStmt.prepareStatement(context)) {
            long result = statement.executeUpdate();
            future.complete(result);
            return result;
        } catch (SQLException ex) {
            dbStmt.closeConnection();
            throw new DbStatementException("Failed to execute statement", dbStmt.context().statement(), ex);
        }
    }

    /**
     * Execute the given insert statement.
     *
     * @param dbStmt  db statement
     * @param future  query future
     * @param context service context
     * @return query result
     */
    static DbResultDml doInsert(JdbcStatement<? extends DbStatementDml> dbStmt,
                                CompletableFuture<Long> future,
                                DbClientServiceContext context,
                                Runnable onClose) {
        PreparedStatement statement;
        try {
            statement = dbStmt.prepareStatement(context);
            long result = statement.executeUpdate();
            ResultSet rs = statement.getGeneratedKeys();
            JdbcRow.Spliterator spliterator = new JdbcRow.Spliterator(rs, statement, dbStmt.context(), future);
            Stream<DbRow> generatedKeys = autoClose(StreamSupport.stream(spliterator, false)
                    .onClose(() -> {
                        spliterator.close();
                        if (onClose != null) {
                            onClose.run();
                        }
                    }));
            return DbResultDml.create(generatedKeys, result);
        } catch (SQLException ex) {
            dbStmt.closeConnection();
            throw new DbStatementException("Failed to execute statement", dbStmt.context().statement(), ex);
        }
    }

}
